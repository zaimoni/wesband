
#	eck...don't use this yet level_npc_check_upgrade_cost event needs to be fixed
#	use the following to give a slight upgrade. depends on how many talentpoints given
#	{VARIABLE the_unit_path.variables.talentpoints 50}
#	{VARIABLE construct_with_unstore no}
#	{VARIABLE slight_upgrade_path "the_unit_path"}
#	{FIRE_EVENT slight_upgrade}
#	{CLEAR_VARIABLE construct_without_unstore}
#	{VARIABLE unit_path "the_unit_path"}
#	{FIRE_EVENT construct_npc}	<- this line is obsolete now	

[event]
	name=slight_upgrade
	first_time_only=no
	{IF_VAR $slight_upgrade_path|.variables.talentpoints greater_than 0 (
		[then]
			[while]
				[variable]
					name=level_npc_vars.nothing_tried_counter_$level_npc_vars.chosen|
					less_than=5
				[/variable]
				[do]
					[set_variables]
						name=level_npc_vars.temp_$slight_upgrade_path|
						to_variable=$slight_upgrade_path|
					[/set_variables]
					{VARIABLE level_npc_vars.i 1}
					{VARIABLE level_npc_vars.nothing_tried_counter 0}
					[while]
						[variable]
							name=level_npc_vars.i
							less_than=4
						[/variable]
						[do]
							{VARIABLE level_npc_vars.i_loop 0}
							[while]
								[variable]
									name=level_npc_vars.i_loop
									less_than=5
								[/variable]
								[do]
									{FIRE_EVENT level_npc_check_upgrade_cost}
									{VARIABLE level_npc_vars.nothing_tried 1}
									
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| light_blade deft deft body}
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| heavy_blade body body deft}
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| polearm body body deft}
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| thrown_light_blade deft deft body}
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| bow deft deft body}
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| thrown_heavy_blade body body deft}
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| javelin body body deft}
									{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| crossbow deft body deft}
									# need to see some sort of filtering for these
									[if]
										[variable]
											name=level_npc_vars.bludgeon
											greater_than=0
										[/variable]
										[then]
											{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| bludgeon body body deft}
										[/then]
									[/if]
									[if]
										[variable]
											name=level_npc_vars.lob
											greater_than=0
										[/variable]
										[then]
											{LEVEL_NPC_UPGRADE_WEAPON $slight_upgrade_path| lob body body deft}
										[/then]
									[/if]
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| HP}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| EVADE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MOVES}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| CRUELTY}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| REGEN}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_CASTING_POWER}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_CASTING_SPEED}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| LEADERSHIP_2}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| LEADERSHIP_3}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| LEADERSHIP_4}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| SKIRMISHER}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| RANGER}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| TRAILBLAZER}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| AMBUSH_FOREST}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| TRAILBLAZER_ELF}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| FIRSTSTRIKE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| RAGE}
									# {LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| DUAL_WIELD}
									# {LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| TRIPLE_WIELD}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| BERSERK}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MARKSMAN}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MARKSMAN_THROWN_LIGHT_BLADE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_FAERIE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| FAERIE_TOUCH}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| VINE_ENSNARE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| VINE_SLOWS}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| FAERIE_FORM}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_BENEVOLENT}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_BALEFUL}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_DARK_INITIATE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_WHITE_ILLUMINATES}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_DARK_PLAGUE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| POISON_THROWN_LIGHT_BLADE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| THUNDERSTICK_TINKER}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_ELDER}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_WOOD}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| NATURE_HEAL}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| BRAMBLES}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| NIGHTSTALK}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| POISON_LIGHT_BLADE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| POISON_THROWN_LIGHT_BLADE_ORC}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| DISTRACT}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| DASH}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| GRACE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| BLOODLUST}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| STEADFAST}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| SLASHDASH}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| RIPOSTE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| ENSNARE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| POINTPIKE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| STORM}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| BRUTAL_ASSAULT}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| CLEAVE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| AMMO_BOW}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| AMMO_JAVELIN}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| AMMO_THROWN_LIGHT}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| AMMO_THROWN_HEAVY}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| GOLIATH_BANE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| READIED_BOLT}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| SNEAK}
									[if]
										[variable]
											name=level_npc_vars.nothing_tried
											boolean_equals=1
										[/variable]
										[variable]
											name=level_npc_vars.i
											equals=1
										[/variable]
										{UPGRADE_ATT_CONDITION $slight_upgrade_path| body}
										[then]
											{UPGRADE_ATT_BODY_EFFECT $slight_upgrade_path|}
											{VARIABLE level_npc_vars.nothing_tried 0}
										[/then]
									[/if]
									[if]
										[variable]
											name=level_npc_vars.nothing_tried
											boolean_equals=1
										[/variable]
										[variable]
											name=level_npc_vars.i
											equals=2
										[/variable]
										{UPGRADE_ATT_CONDITION $slight_upgrade_path| deft}
										[then]
											{UPGRADE_ATT_DEFT_EFFECT $slight_upgrade_path|}
											{VARIABLE level_npc_vars.nothing_tried 0}
										[/then]
									[/if]
									[if]
										[variable]
											name=level_npc_vars.nothing_tried
											boolean_equals=1
										[/variable]
										[variable]
											name=level_npc_vars.i
											equals=3
										[/variable]
										{UPGRADE_ATT_CONDITION $slight_upgrade_path| mind}
										[then]
											{UPGRADE_ATT_MIND_EFFECT $slight_upgrade_path|}
											{VARIABLE level_npc_vars.nothing_tried 0}
										[/then]
									[/if]
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_RUNIC}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_INITIATE}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_DARK}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_SWAMP}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_TRIBAL}
									{LEVEL_NPC_UPGRADE_MISC $slight_upgrade_path| MAGIC_TROLL}
									{VARIABLE_OP level_npc_vars.i_loop add 1}
									{VARIABLE_OP level_npc_vars.nothing_tried_counter add $level_npc_vars.nothing_tried}
								[/do]
							[/while]
							[construct_unit]
								variable=$slight_upgrade_path
								unstore=$construct_with_unstore
							[/construct_unit]
							[set_variables]
								name=level_npc_vars.compare_store_$level_npc_vars.i|
								mode=replace
								to_variable=$slight_upgrade_path|
							[/set_variables]			
							{VARIABLE level_npc_vars.nothing_tried_counter_$level_npc_vars.i| $level_npc_vars.nothing_tried_counter}
							{VARIABLE_OP level_npc_vars.i add 1}
						[/do]
					[/while]
					{IF_VAR level_npc_vars.compare_store_3.variables.absolute_value greater_than $level_npc_vars.compare_store_2.variables.absolute_value (
						[then]
							{IF_VAR level_npc_vars.compare_store_3.variables.absolute_value greater_than $level_npc_vars.compare_store_1.variables.absolute_value (
								[then]
									[set_variables]
										name=$slight_upgrade_path|
										mode=replace
										to_variable=level_npc_vars.compare_store_3
									[/set_variables]
									{VARIABLE level_npc_vars.chosen 3}
								[/then]
								[else]
									[set_variables]
										name=$slight_upgrade_path|
										mode=replace
										to_variable=level_npc_vars.compare_store_1
									[/set_variables]
									{VARIABLE level_npc_vars.chosen 1}
								[/else]
							)}
						[/then]
						[else]
							{IF_VAR level_npc_vars.compare_store_2.variables.absolute_value greater_than $level_npc_vars.compare_store_1.variables.absolute_value (
								[then]
									[set_variables]
										name=$slight_upgrade_path|
										mode=replace
										to_variable=level_npc_vars.compare_store_2
									[/set_variables]
									{VARIABLE level_npc_vars.chosen 2}
								[/then]
								[else]
									[set_variables]
										name=$slight_upgrade_path|
										mode=replace
										to_variable=level_npc_vars.compare_store_1
									[/set_variables]
									{VARIABLE level_npc_vars.chosen 1}
								[/else]
							)}
						[/else]
					)}
				[/do]
			[/while]				
		[/then]
	)}
	{CLEAR_VARIABLE level_npc_vars}
[/event]

[event]
	name=level_npc
	first_time_only=no
	# note: need to make traits count
	{VARIABLE level_npc_vars.talentpoints_before $npc_temp.variables.talentpoints}
	{IF_VAR npc_temp.type not_equals $level_npc_vars.old_type (
		[then]
			{IF_VAR npc_temp.race equals monster (
				[or]
					[variable]
						name=npc_temp.race
						equals=elemental
					[/variable]
				[/or] 
				[or]
					[variable]
						name=npc_temp.race
						equals=bats
					[/variable]
				[/or] 
				[or]
					[variable]
						name=npc_temp.race
						equals=wolf
					[/variable]
				[/or]
				[or]
					[variable]
						name=npc_temp.race
						equals=WBD_cyclop
					[/variable]
				[/or]
				[or]
					[variable]
						name=npc_temp.race
						equals=undead
					[/variable]
					[variable]
						name=npc_temp.npc_init.abilities.skeletal
						numerical_not_equals=1
					[/variable]
				[/or]
				[then]
					# need traits in here but i'm not going to worry about that just now
					{CLEAR_VARIABLE npc_temp.variables.inventory}
					{VARIABLE unit_path "npc_temp"}
					{VARIABLE level_npc_vars.temp_moves $npc_temp.moves}
					{FIRE_EVENT create_npc_else}
					{FIRE_EVENT npc_apply_traits}
					{FIRE_EVENT npc_apply_items}
					{VARIABLE npc_temp.moves $level_npc_vars.temp_moves}
					{VARIABLE npc_temp.variables.talentpoints -9999}
					[construct_unit]
						variable=npc_temp
						unstore=$construct_with_unstore
					[/construct_unit]
				[/then]
				[else]
					{IF_VAR npc_temp.alignment not_equals $level_npc_vars.old_alignment (
						[then]
							[switch]
								variable=npc_temp.alignment
								[case]
									value=lawful
									{LEVEL_NPC_ALIGN_ABILITY human_magic -1}
									{LEVEL_NPC_ALIGN_ABILITY leadership -1}
									{LEVEL_NPC_ALIGN_ABILITY marksman 0}
									{LEVEL_NPC_ALIGN_ABILITY loner 0}
									{LEVEL_NPC_ALIGN_ABILITY sneak 0}
									{LEVEL_NPC_ALIGN_ABILITY trailblazer 0}
									{LEVEL_NPC_ALIGN_ABILITY backstab 0}
									{LEVEL_NPC_ALIGN_ABILITY poison_thrown_light_blade 0}
									{LEVEL_NPC_ALIGN_ABILITY dark_magic 0}
									{LEVEL_NPC_ALIGN_ABILITY distract 0}
									{LEVEL_NPC_ALIGN_ABILITY fire_shot_bow 0}
									{LEVEL_NPC_ALIGN_ABILITY fire_shot_xbow 0}
								[/case]
								[case]
									value=neutral
									{LEVEL_NPC_ALIGN_ABILITY human_magic 0}
									{LEVEL_NPC_ALIGN_ABILITY leadership 0}
									{LEVEL_NPC_ALIGN_ABILITY marksman -1}
									{LEVEL_NPC_ALIGN_ABILITY loner -1}
									{LEVEL_NPC_ALIGN_ABILITY sneak -1}
									{LEVEL_NPC_ALIGN_ABILITY trailblazer -1}
									{LEVEL_NPC_ALIGN_ABILITY backstab 0}
									{LEVEL_NPC_ALIGN_ABILITY poison_thrown_light_blade 0}
									{LEVEL_NPC_ALIGN_ABILITY dark_magic 0}
									{LEVEL_NPC_ALIGN_ABILITY distract 0}
									{LEVEL_NPC_ALIGN_ABILITY fire_shot_bow 0}
									{LEVEL_NPC_ALIGN_ABILITY fire_shot_xbow 0}
								[/case]
								[case]
									value=chaotic
									{LEVEL_NPC_ALIGN_ABILITY human_magic 0}
									{LEVEL_NPC_ALIGN_ABILITY leadership 0}
									{LEVEL_NPC_ALIGN_ABILITY marksman -1}
									{LEVEL_NPC_ALIGN_ABILITY loner 0}
									{LEVEL_NPC_ALIGN_ABILITY sneak -1}
									{LEVEL_NPC_ALIGN_ABILITY trailblazer 0}
									{LEVEL_NPC_ALIGN_ABILITY backstab -1}
									{LEVEL_NPC_ALIGN_ABILITY poison_thrown_light_blade -1}
									{LEVEL_NPC_ALIGN_ABILITY dark_magic -1}
									{LEVEL_NPC_ALIGN_ABILITY distract -1}
									{LEVEL_NPC_ALIGN_ABILITY fire_shot_bow -1}
									{LEVEL_NPC_ALIGN_ABILITY fire_shot_xbow -1}
								[/case]
							[/switch]
						[/then]
					)}
					[while]
						[variable]
							name=level_npc_vars.nothing_tried
							not_equals=1
						[/variable]
						[do]
							{FIRE_EVENT level_npc_check_upgrade_cost}
							{VARIABLE level_npc_vars.nothing_tried 1}
							# consider base unit first
							{IF_VAR npc_temp.npc_init.body greater_than $npc_temp.variables.body (
								{UPGRADE_ATT_CONDITION npc_temp body}
								[then]
									{UPGRADE_ATT_BODY_EFFECT npc_temp}
									{VARIABLE level_npc_vars.nothing_tried 0}
								[/then]
							)}
							{IF_VAR npc_temp.npc_init.deft greater_than $npc_temp.variables.deft (
								{UPGRADE_ATT_CONDITION npc_temp deft}
								[then]
									{UPGRADE_ATT_DEFT_EFFECT npc_temp}
									{VARIABLE level_npc_vars.nothing_tried 0}
								[/then]
							)}
							{IF_VAR npc_temp.npc_init.mind greater_than $npc_temp.variables.mind (
								{UPGRADE_ATT_CONDITION npc_temp mind}
								[then]
									{UPGRADE_ATT_MIND_EFFECT npc_temp}
									{VARIABLE level_npc_vars.nothing_tried 0}
								[/then]
							)}
							{LEVEL_NPC_COMPARE_WEAPON bludgeon body body deft}
							{LEVEL_NPC_COMPARE_WEAPON light_blade deft deft body}
							{LEVEL_NPC_COMPARE_WEAPON heavy_blade body body deft}
							{LEVEL_NPC_COMPARE_WEAPON polearm body body deft}
							{LEVEL_NPC_COMPARE_WEAPON lob body body deft}
							{LEVEL_NPC_COMPARE_WEAPON thrown_light_blade deft deft body}
							{LEVEL_NPC_COMPARE_WEAPON bow deft deft body}
							{LEVEL_NPC_COMPARE_WEAPON thrown_heavy_blade body body deft}
							{LEVEL_NPC_COMPARE_WEAPON javelin body body deft}
							{LEVEL_NPC_COMPARE_WEAPON crossbow deft body deft}
							{IF_VAR npc_temp.npc_init.hitpoints greater_than $npc_temp.hitpoints (
								{UPGRADE_HP_CONDITION npc_temp}
								[then]
									{UPGRADE_HP_EFFECT npc_temp}
									{VARIABLE level_npc_vars.nothing_tried 0}
								[/then]
							)}
							{LEVEL_NPC_COMPARE_UPGRADE EVADE "upgrades.evade_level"}
							{LEVEL_NPC_COMPARE_UPGRADE MOVES "upgrades.moves_level"}
							{LEVEL_NPC_COMPARE_MISC REGEN regen}
							{LEVEL_NPC_COMPARE_MISC MAGIC_CASTING_POWER "magic_casting.power"}
							{LEVEL_NPC_COMPARE_MISC MAGIC_CASTING_SPEED "magic_casting.speed"}
							{LEVEL_NPC_COMPARE_MISC LEADERSHIP_1 leadership}
							{LEVEL_NPC_COMPARE_MISC LEADERSHIP_2 leadership}
							{LEVEL_NPC_COMPARE_MISC LEADERSHIP_3 leadership}
							{LEVEL_NPC_COMPARE_MISC LEADERSHIP_4 leadership}
							{LEVEL_NPC_COMPARE_MISC SKIRMISHER skirm}
							{LEVEL_NPC_COMPARE_MISC REGEN regen}
							{LEVEL_NPC_COMPARE_MISC RANGER ranger}
							{LEVEL_NPC_COMPARE_MISC TRAILBLAZER trailblazer}
							{LEVEL_NPC_COMPARE_MISC AMBUSH_FOREST ambush_forest}
							{LEVEL_NPC_COMPARE_MISC TRAILBLAZER_ELF trailblazer_elf}
							{LEVEL_NPC_COMPARE_MISC FIRSTSTRIKE firststrike}
							{LEVEL_NPC_COMPARE_MISC RAGE rage}
							{LEVEL_NPC_COMPARE_MISC DUAL_WIELD wield}
							{LEVEL_NPC_COMPARE_MISC TRIPLE_WIELD wield}
							{LEVEL_NPC_COMPARE_MISC BERSERK berserk}
							{LEVEL_NPC_COMPARE_MISC BACKSTAB backstab}
							{LEVEL_NPC_COMPARE_MISC MARKSMAN marksman}
							{LEVEL_NPC_COMPARE_MISC MARKSMAN_THROWN_LIGHT_BLADE marksman_thrown_light_blade}
							{LEVEL_NPC_COMPARE_MISC MAGIC_FAERIE faerie_magic}
							{LEVEL_NPC_COMPARE_MISC FAERIE_TOUCH faerie_touch}
							{LEVEL_NPC_COMPARE_MISC VINE_ENSNARE vine_ensnare}
							{LEVEL_NPC_COMPARE_MISC VINE_SLOWS vine_slows}
							{LEVEL_NPC_COMPARE_MISC FAERIE_FORM faerie_form}
							{LEVEL_NPC_COMPARE_MISC MAGIC_BENEVOLENT benevolent}
							{LEVEL_NPC_COMPARE_MISC MAGIC_BALEFUL baleful}
							{LEVEL_NPC_COMPARE_MISC MAGIC_DARK_INITIATE dark_magic}
							{LEVEL_NPC_COMPARE_MISC MAGIC_WHITE_ILLUMINATES illuminates}
							{LEVEL_NPC_COMPARE_MISC MAGIC_DARK_PLAGUE plague}
							{LEVEL_NPC_COMPARE_MISC POISON_THROWN_LIGHT_BLADE poison_thrown_light_blade}
							{LEVEL_NPC_COMPARE_MISC THUNDERSTICK_TINKER thunderstick_tinker}
							[switch]
								variable=npc_temp.npc_init.abilities.human_magic
								[case]
									value=2
									{LEVEL_NPC_COMPARE_MISC MAGIC_RED human_magic}
								[/case]
								[case]
									value=3
									{LEVEL_NPC_COMPARE_MISC MAGIC_WHITE human_magic}
								[/case]
								[case]
									value=3
									{LEVEL_NPC_COMPARE_MISC MAGIC_SILVER human_magic}
								[/case]
							[/switch]
							{LEVEL_NPC_COMPARE_MISC MAGIC_WOOD wood_magic}
							{LEVEL_NPC_COMPARE_MISC NATURE_HEAL nature_heal}
							{LEVEL_NPC_COMPARE_MISC BRAMBLES brambles}
							{LEVEL_NPC_COMPARE_MISC NIGHTSTALK nightstalk}
							{LEVEL_NPC_COMPARE_MISC POISON_LIGHT_BLADE poison_light_blade}
							{LEVEL_NPC_COMPARE_MISC BATTLE_TUTOR battle_tutor}
							{LEVEL_NPC_COMPARE_MISC KUSARIGAMA_SLOWS kusarigama_slows}
							{LEVEL_NPC_COMPARE_MISC KUSARIGAMA_POISON kusarigama_poison}
							{LEVEL_NPC_COMPARE_MISC DREAD dread}
							{LEVEL_NPC_COMPARE_MISC MINOTAUR_MAGIC_1 minotaur_magic}
							[switch]
								variable=npc_temp.npc_init.abilities.minotaur_magic
								[case]
									value=2
									{LEVEL_NPC_COMPARE_MISC MINOTAUR_MAGIC_2 minotaur_magic}
								[/case]
								[case]
									value=3
									{LEVEL_NPC_COMPARE_MISC MINOTAUR_MAGIC_3 minotaur_magic}
								[/case]
							[/switch]
							{LEVEL_NPC_COMPARE_MISC NET net}
							{LEVEL_NPC_COMPARE_MISC ACCURACY_LIGHT_BLADE accuracy_light_blade}
							{LEVEL_NPC_COMPARE_MISC EVASION_POLEARM evasion_polearm}
							{LEVEL_NPC_COMPARE_MISC WITCH_MAGIC witch_magic}
							[switch]
								variable=npc_temp.npc_init.abilities.witch_magic
								[case]
									value=2
									{LEVEL_NPC_COMPARE_MISC WITCH_MAGIC_2 witch_magic}
								[/case]
								[case]
									value=3
									{LEVEL_NPC_COMPARE_MISC WITCH_MAGIC_3 witch_magic}
								[/case]
								[case]
									value=4
									{LEVEL_NPC_COMPARE_MISC WITCH_MAGIC_4 witch_magic}
								[/case]
							[/switch]
						[/do]
					[/while]
				[/else]
			)}
		[/then]
		[else]
			{VARIABLE_OP npc_temp.max_experience multiply 1.17}
			{VARIABLE_OP npc_temp.max_experience round 0}
			{VARIABLE_OP npc_temp.level add 1}
			{IF_VAR npc_temp.race equals monster (
				[or]
					[variable]
						name=npc_temp.race
						equals=elemental
					[/variable]
				[/or] 
				[or]
					[variable]
						name=npc_temp.race
						equals=bats
					[/variable]
				[/or] 
				[or]
					[variable]
						name=npc_temp.race
						equals=wolf
					[/variable]
				[/or]
				[or]
					[variable]
						name=npc_temp.race
						equals=WBD_cyclop
					[/variable]
				[/or]
				[or]
					[variable]
						name=npc_temp.race
						equals=undead
					[/variable]
					[variable]
						name=npc_temp.npc_init.abilities.skeletal
						numerical_not_equals=1
					[/variable]
				[/or]
				[then]
					# need traits in here but i'm not going to worry about that just now
					{VARIABLE npc_temp.variables.body "$(($npc_temp.variables.body*3+1)/2)"}
					{VARIABLE npc_temp.variables.deft "$(($npc_temp.variables.deft*3+1)/2)"}
					{VARIABLE npc_temp.variables.mind "$(($npc_temp.variables.mind*3+1)/2)"}
					{VARIABLE npc_temp.max_hitpoints "$(($npc_temp.max_hitpoints*13+5)/10)"}
					{VARIABLE npc_temp.variables.talentpoints 1000}
				[/then]
			)}
		[/else]
	)}
#	{WML_MSG "$npc_temp.type
# {DEBUG_NPC_WEAPON_SKILLS bludgeon} {DEBUG_NPC_WEAPON_SKILLS light_blade} {DEBUG_NPC_WEAPON_SKILLS heavy_blade} {DEBUG_NPC_WEAPON_SKILLS polearm}
# {DEBUG_NPC_WEAPON_SKILLS lob} {DEBUG_NPC_WEAPON_SKILLS thrown_light_blade} {DEBUG_NPC_WEAPON_SKILLS bow} {DEBUG_NPC_WEAPON_SKILLS thrown_heavy_blade} {DEBUG_NPC_WEAPON_SKILLS javelin} {DEBUG_NPC_WEAPON_SKILLS crossbow}
# casting power: $npc_temp.npc_init.abilities.magic_casting.power $npc_temp.variables.abilities.magic_casting.power speed: $npc_temp.npc_init.abilities.magic_casting.speed $npc_temp.variables.abilities.magic_casting.speed evade: $npc_temp.npc_init.evade_level $npc_temp.variables.evade_level moves: $npc_temp.npc_init.moves_level $npc_temp.variables.moves_level
# TP used: $($level_npc_vars.talentpoints_before-$npc_temp.variables.talentpoints) exp: $level_npc_vars.old_experience body: $npc_temp.npc_init.body $npc_temp.variables.body deft: $npc_temp.npc_init.deft $npc_temp.variables.deft mind: $npc_temp.npc_init.mind $npc_temp.variables.mind"}
	{VARIABLE_OP level_npc_vars.talentpoints_before sub $npc_temp.variables.talentpoints}
	{VARIABLE_OP level_npc_vars.old_experience multiply 1.05}
	{VARIABLE_OP level_npc_vars.old_experience round 0}
	{VARIABLE_OP level_npc_vars.old_experience sub $level_npc_vars.talentpoints_before}
	{VARIABLE npc_temp.variables.talentpoints $level_npc_vars.old_experience}
	{VARIABLE slight_upgrade_path "npc_temp"}
	{FIRE_EVENT slight_upgrade}
[/event]

[event]
	name=level_npc_check_upgrade_cost
	first_time_only=no
	{UPGRADE_COSTS_RECURRING npc_temp}
[/event]

[event]
	name=advance
	first_time_only=no
    [filter]
        [not]
			canrecruit=yes
		[/not]
    [/filter]
	[store_unit]
		variable=npc_temp
		[filter]
			x,y=$x1,$y1
		[/filter]
	[/store_unit]
	[set_variables]
		# unstoring here causes problems, but i'm assuming all advance events happen at once, then all post advance
		# have to prevent problems if 2 units advance at once
		name=level_$npc_temp.x|_$npc_temp.y|
		mode=replace
		[value]
			max_hitpoints=$npc_temp.max_hitpoints
			overlays=$npc_temp.overlays
			max_experience=$npc_temp.max_experience
		[/value]
	[/set_variables]
	[set_variables]
		name=level_$npc_temp.x|_$npc_temp.y|.old_npc_init
		to_variable=npc_temp.npc_init
	[/set_variables]
	{VARIABLE level_$npc_temp.x|_$npc_temp.y|.old_alignment $npc_temp.alignment}
	{VARIABLE level_$npc_temp.x|_$npc_temp.y|.old_type $npc_temp.type}	
	{VARIABLE level_$npc_temp.x|_$npc_temp.y|.old_experience $npc_temp.max_experience}	
[/event]
[event]
    name=post_advance
    first_time_only=no
    [filter]
        [not]
			canrecruit=yes
		[/not]
    [/filter]
	[store_unit]
		variable=npc_temp
		[filter]
			x,y=$x1,$y1
		[/filter]
	[/store_unit]
	{IF_VAR npc_temp.advancement.id not_equals levelundead (
		[or]
			[variable]
				name=npc_temp.side
				greater_than=$const.max_player_count
			[/variable]
		[/or]
		[then]
			{FOREACH npc_temp.attack i}
				{IF_VAR npc_temp.attack[$i].class equals bludgeon (
					[then]
						{VARIABLE_OP level_npc_vars.bludgeon add 1}
					[/then]
				)}
				{IF_VAR npc_temp.attack[$i].class equals lob (
					[then]
						{VARIABLE_OP level_npc_vars.lob add 1}
					[/then]
				)}
			{NEXT i}

			[set_variables]
				name=npc_temp
				mode=merge
				[value]
					max_hitpoints=$level_$npc_temp.x|_$npc_temp.y|.max_hitpoints
					overlays=$level_$npc_temp.x|_$npc_temp.y|.overlays
				[/value]
			[/set_variables]
			{VARIABLE_OP npc_temp.max_hitpoints add 5}
			[set_variables]
				name=level_npc_vars.old_npc_init
				to_variable=level_$npc_temp.x|_$npc_temp.y|.old_npc_init
			[/set_variables]
			{VARIABLE level_npc_vars.old_type $level_$npc_temp.x|_$npc_temp.y|.old_type}
			{VARIABLE level_npc_vars.old_experience $level_$npc_temp.x|_$npc_temp.y|.old_experience}
			{VARIABLE level_npc_vars.old_alignment $level_$npc_temp.x|_$npc_temp.y|.old_alignment}
			{FOREACH npc_temp.modifications.trait i}
				{IF_VAR npc_temp.modifications.trait[$i].id equals intelligent (
					[or]
						[variable]
							name=npc_temp.modifications.trait[$i].id
							equals=sapphire
						[/variable]
					[/or]
					[then]
						{VARIABLE_OP level_npc_vars.old_experience multiply 1.2}
						{VARIABLE_OP level_npc_vars.old_experience round 0}
						{VARIABLE_OP level_npc_vars.old_experience add 1}
					[/then]
				)}
			{NEXT i}
			{VARIABLE npc_temp.variables.talentpoints 9000}
								
			{CLEAR_VARIABLE level_$npc_temp.x|_$npc_temp.y|}
			{VARIABLE unit_path npc_temp}
			{VARIABLE construct_with_unstore no}
			[construct_unit]
				variable=npc_temp
				unstore=$construct_with_unstore
			[/construct_unit]

			{FIRE_EVENT level_npc}	

			{VARIABLE npc_temp.hitpoints $npc_temp.max_hitpoints}
			{IF_VAR npc_temp.max_experience greater_than 150 (
				[then]
					{VARIABLE npc_temp.max_experience 150}
				[/then]
			)}
			{CLEAR_VARIABLE construct_without_unstore}
			[construct_unit]
				variable=npc_temp
			[/construct_unit]
		[/then]
	)}	
[/event]

[event]
    name=post_advance
    first_time_only=no
    [filter]
        [filter_wml]
            [not]
                upkeep=0
            [/not]
        [/filter_wml]
    [/filter]
    {VARIABLE unit.upkeep 0}
    [unstore_unit]
        variable=unit
    [/unstore_unit]
[/event]


#level undead NPC
[event]
    name=post_advance
    first_time_only=no

    [filter]
        [filter_wml]
			[advancement]
				id=levelundead
			[/advancement]
		[/filter_wml]
    [/filter]
	[if]
		[variable]
			name=unit.zoc
			boolean_equals="no"
		[/variable]
		[then]
			{VARIABLE unit.zoc "yes"}
			{VARIABLE change_ellipse 1}
		[/then]
	[/if]
	
	{VARIABLE_OP unit.level add 1}
	[unstore_unit]
		variable=unit
	[/unstore_unit]
	{IF_VAR change_ellipse numerical_equals 1 (
		[then]
			[object]
				id=ellipse
				name="ellipse"
				silent=yes
				[filter]
					x=$unit.x
					y=$unit.y
				[/filter]
				[effect]
					apply_to=ellipse
					ellipse="misc/ellipse"
				[/effect]
			[/object]		
			{CLEAR_VARIABLE change_ellipse}
		[/then]
	)}
[/event]

[event]
	name=npc_eval_weapon
	first_time_only=no
	{VARIABLE construct_with_unstore no}
	[if]
		{ITEM_WIELDER}
		[then]
			[if]
				[variable]
					name=npc_temp.type
					equals="Skeleton_MODRPG"
				[/variable]
				[and]
					name=npc_temp.side
					equals=$side_number
				[/and]
				[then]
					{VARIABLE will_carry 1}
					{IF_VAR $path|.range equals "melee" (
						[then]
							{VARIABLE range_slot "melee_1"}
						[/then]
						[else]
							{VARIABLE range_slot "ranged"}
						[/else]
					)}
					[if]
						[variable]
							name=npc_temp.variables.inventory.weapons.$$path|.range|[$npc_temp.variables.equipment_slots.$range_slot|].undroppable
							boolean_not_equals=1
						[/variable]
						[then]
							{DROP_ITEM npc_temp.variables.inventory.weapons.$$path|.range|[$npc_temp.variables.equipment_slots.$range_slot|] npc_temp.x npc_temp.y}
							{CLEAR_VARIABLE npc_temp.variables.inventory.weapons.$$path|.range|[$npc_temp.variables.equipment_slots.$range_slot|]}
						[/then]
					[/if]
					[set_variables]
						name=npc_temp.variables.inventory.weapons.$$path|.range|
						mode=append
						to_variable=$path
					[/set_variables]
					{VARIABLE npc_temp.variables.equipment_slots.$range_slot| $npc_temp.variables.inventory.weapons.$$path|.range|.length}
					{VARIABLE_OP npc_temp.variables.equipment_slots.$range_slot| sub 1}
					{VARIABLE construct_with_unstore yes}
					[construct_unit]
						variable=npc_temp
						unstore=$construct_with_unstore
					[/construct_unit]
				[/then]
				[else]
					[if]
						[variable]
							name=$path|.range
							equals=melee
						[/variable]
						[then]
							[switch]
								variable=npc_temp.variables.abilities.wield
								[case]
									value=0
									{NPC_EVAL_WEAPON_SINGLE melee "melee_1"}
								[/case]
								[case]
									value=-1
									[if]
										[variable]
											name=npc_temp.variables.deft
											less_than=4
										[/variable]
										[then]
											{NPC_EVAL_WEAPON_SINGLE melee "melee_1"}
										[/then]
										[else]
											{VARIABLE will_carry 1}
											
											# npc_eval_weapon, straight substitution
											{NPC_EVAL_WEAPON_TESTER npc_eval_weapon melee 
												(
													[if]
														[variable]
															name=npc_eval_weapon.variables.inventory.weapons.melee[$npc_eval_weapon.variables.equipment_slots.melee_1].undroppable
															boolean_not_equals=1
														[/variable]
														[then]
															{CLEAR_VARIABLE npc_eval_weapon.variables.inventory.weapons.melee[$npc_eval_weapon.variables.equipment_slots.melee_1]}
														[/then]
													[/if]
													{VARIABLE npc_eval_weapon.variables.equipment_slots.melee_1 $npc_eval_weapon.variables.inventory.weapons.melee.length}
													{VARIABLE_OP npc_eval_weapon.variables.equipment_slots.melee_1 sub 1}
												)
											}
											
											# npc_eval_weapon_2, wield=1, existing+new
											{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_2 melee 
												(
													{VARIABLE npc_eval_weapon_2.variables.abilities.wield 1}
													{VARIABLE npc_eval_weapon_2.variables.equipment_slots.melee_2 $npc_eval_weapon_2.variables.inventory.weapons.melee.length}
													{VARIABLE_OP npc_eval_weapon_2.variables.equipment_slots.melee_2 sub 1}
												)
											}
											
											# npc_eval_weapon_3, wield=1, new+existing
											{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_3 melee 
												(
													{VARIABLE npc_eval_weapon_3.variables.abilities.wield 1}
													{VARIABLE npc_eval_weapon_3.variables.equipment_slots.melee_2 $npc_eval_weapon_3.variables.equipment_slots.melee_1}
													{VARIABLE npc_eval_weapon_3.variables.equipment_slots.melee_1 $npc_eval_weapon_3.variables.inventory.weapons.melee.length}
													{VARIABLE_OP npc_eval_weapon_3.variables.equipment_slots.melee_1 sub 1}
												)
											}
											
											# {WML_MSG "eval_weapon original: $npc_temp.variables.absolute_value straight substitution: $npc_eval_weapon.variables.absolute_value existing and new: $npc_eval_weapon_2.variables.absolute_value new and existing: $npc_eval_weapon_3.variables.absolute_value"}
											# compare values, if value is lower, will_carry=0
											
											# prepare for sorting
											[set_variables]
												name=npc_eval_weapon_sort
												mode=replace
												[value]
													id=4
													value=$npc_temp.variables.absolute_value
												[/value]
												[value]
													id=3
													value=$npc_eval_weapon_2.variables.absolute_value
												[/value]
												[value]
													id=2
													value=$npc_eval_weapon_3.variables.absolute_value
												[/value]
												[value]
													id=1
													value=$npc_eval_weapon.variables.absolute_value
												[/value]
											[/set_variables]
													
											# sort
											{NPC_EVAL_WEAPON_SORT}
											
											# assign result
											
											[switch]
												variable=npc_eval_weapon_sort.id
												[case]
													value=1
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon}
												[/case]
												[case]
													value=2
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_3}
												[/case]
												[case]
													value=3
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_2}
												[/case]
												[case]
													value=4
													{VARIABLE will_carry 0}
												[/case]
											[/switch]
											
											# clear variables and extra units
											{CLEAR_VARIABLE npc_eval_weapon,npc_eval_weapon_2,npc_eval_weapon_3,npc_temp,npc_eval_weapon_sort}
										[/else]
									[/if]
								[/case]
								[case]
									value=1
									# this section is a little different, combines granting wield=2 with not granting it
									{VARIABLE will_carry 1}
							
									# npc_eval_weapon, existing1 + new
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon melee 
										(									
											[if]
												[variable]
													name=npc_eval_weapon.variables.inventory.weapons.melee[$npc_eval_weapon.variables.equipment_slots.melee_2].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon.variables.inventory.weapons.melee[$npc_eval_weapon.variables.equipment_slots.melee_2]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon.variables.equipment_slots.melee_2 $npc_eval_weapon.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon.variables.equipment_slots.melee_2 sub 1}
										)
									}
									# npc_eval_weapon_2, new + existing2
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_2 melee 
										(									
											[if]
												[variable]
													name=npc_eval_weapon_2.variables.inventory.weapons.melee[$npc_eval_weapon_2.variables.equipment_slots.melee_1].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_2.variables.inventory.weapons.melee[$npc_eval_weapon_2.variables.equipment_slots.melee_1]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_2.variables.equipment_slots.melee_1 $npc_eval_weapon_2.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_2.variables.equipment_slots.melee_1 sub 1}
										)
									}
									# npc_eval_weapon_3, new + existing1
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_3 melee 
										(									
											[if]
												[variable]
													name=npc_eval_weapon_3.variables.inventory.weapons.melee[$npc_eval_weapon_3.variables.equipment_slots.melee_2].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_3.variables.inventory.weapons.melee[$npc_eval_weapon_3.variables.equipment_slots.melee_2]}
												[/then]
											[/if]
											{VARIABLE $npc_eval_weapon_3.variables.equipment_slots.melee_2 $npc_eval_weapon_3.variables.equipment_slots.melee_1}
											{VARIABLE npc_eval_weapon_3.variables.equipment_slots.melee_1 $npc_eval_weapon_3.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_3.variables.equipment_slots.melee_1 sub 1}
										)
									}
									# npc_eval_weapon_4, existing2 + new
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_4 melee 
										(									
											[if]
												[variable]
													name=npc_eval_weapon_4.variables.inventory.weapons.melee[$npc_eval_weapon_4.variables.equipment_slots.melee_1].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_4.variables.inventory.weapons.melee[$npc_eval_weapon_4.variables.equipment_slots.melee_1]}
												[/then]
											[/if]
											{VARIABLE $npc_eval_weapon_4.variables.equipment_slots.melee_1 $npc_eval_weapon_4.variables.equipment_slots.melee_2}
											{VARIABLE npc_eval_weapon_4.variables.equipment_slots.melee_2 $npc_eval_weapon_4.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_4.variables.equipment_slots.melee_2 sub 1}
										)
									}
									[if]
										[variable]
											name=npc_temp.variables.deft
											greater_than_equal_to=8
										[/variable]
										[then]
											# npc_eval_weapon_5, e1+e2+n
											{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_5 melee 
												(									
													{VARIABLE npc_eval_weapon_5.variables.abilities.wield 2}
													{VARIABLE npc_eval_weapon_5.variables.equipment_slots.melee_3 $npc_eval_weapon_5.variables.inventory.weapons.melee.length}
													{VARIABLE_OP npc_eval_weapon_5.variables.equipment_slots.melee_3 sub 1}
												)
											}
											# npc_eval_weapon_6, n+e1+e2
											{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_6 melee 
												(									
													{VARIABLE npc_eval_weapon_6.variables.abilities.wield 2}
													{VARIABLE npc_eval_weapon_6.variables.equipment_slots.melee_3 $npc_eval_weapon_6.variables.equipment_slots.melee_2}
													{VARIABLE npc_eval_weapon_6.variables.equipment_slots.melee_2 $npc_eval_weapon_6.variables.equipment_slots.melee_1}
													{VARIABLE npc_eval_weapon_6.variables.equipment_slots.melee_1 $npc_eval_weapon_6.variables.inventory.weapons.melee.length}
													{VARIABLE_OP npc_eval_weapon_6.variables.equipment_slots.melee_1 sub 1}
												)
											}
											# npc_eval_weapon_7, n+e2+e1
											{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_7 melee 
												(									
													{VARIABLE npc_eval_weapon_7.variables.abilities.wield 2}
													{VARIABLE npc_eval_weapon_7.variables.equipment_slots.melee_3 $npc_eval_weapon_7.variables.equipment_slots.melee_1}
													{VARIABLE npc_eval_weapon_7.variables.equipment_slots.melee_1 $npc_eval_weapon_7.variables.inventory.weapons.melee.length}
													{VARIABLE_OP npc_eval_weapon_7.variables.equipment_slots.melee_1 sub 1}
												)
											}
											# npc_eval_weapon_8, e2+e1+n
											{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_8 melee 
												(									
													{VARIABLE npc_eval_weapon_8.variables.abilities.wield 2}
													{VARIABLE npc_eval_weapon_8.variables.equipment_slots.melee_3 $npc_eval_weapon_8.variables.equipment_slots.melee_1}
													{VARIABLE npc_eval_weapon_8.variables.equipment_slots.melee_1 $npc_eval_weapon_8.variables.equipment_slots.melee_2}
													{VARIABLE npc_eval_weapon_8.variables.equipment_slots.melee_2 $npc_eval_weapon_8.variables.equipment_slots.melee_3}
													{VARIABLE npc_eval_weapon_8.variables.equipment_slots.melee_3 $npc_eval_weapon_8.variables.inventory.weapons.melee.length}
													{VARIABLE_OP npc_eval_weapon_8.variables.equipment_slots.melee_3 sub 1}
												)
											}
										[/then]
									[/if]
									# prepare for sorting
									[if]
										[variable]
											name=npc_temp.variables.deft
											less_than=8
										[/variable]
										[then]							
											[set_variables]
												name=npc_eval_weapon_sort
												mode=replace
												[value]
													id=1
													value=$npc_temp.variables.absolute_value
												[/value]
												[value]
													id=2
													value=$npc_eval_weapon.variables.absolute_value
												[/value]
												[value]
													id=3
													value=$npc_eval_weapon_2.variables.absolute_value
												[/value]
												[value]
													id=4
													value=$npc_eval_weapon_3.variables.absolute_value
												[/value]
											[/set_variables]
										[/then]
										[else]
											[set_variables]
												name=npc_eval_weapon_sort
												mode=replace
												[value]
													id=1
													value=$npc_temp.variables.absolute_value
												[/value]
												[value]
													id=2
													value=$npc_eval_weapon.variables.absolute_value
												[/value]
												[value]
													id=3
													value=$npc_eval_weapon_2.variables.absolute_value
												[/value]
												[value]
													id=4
													value=$npc_eval_weapon_3.variables.absolute_value
												[/value]
												[value]
													id=5
													value=$npc_eval_weapon_4.variables.absolute_value
												[/value]
												[value]
													id=6
													value=$npc_eval_weapon_5.variables.absolute_value
												[/value]
												[value]
													id=7
													value=$npc_eval_weapon_6.variables.absolute_value
												[/value]
												[value]
													id=8
													value=$npc_eval_weapon_7.variables.absolute_value
												[/value]
												[value]
													id=9
													value=$npc_eval_weapon_8.variables.absolute_value
												[/value]
											[/set_variables]
										[/else]
									[/if]
									
									#sort
									{NPC_EVAL_WEAPON_SORT}
									
									# {WML_MSG "$npc_temp.variables.absolute_value $npc_eval_weapon.variables.absolute_value $npc_eval_weapon_2.variables.absolute_value $npc_eval_weapon_3.variables.absolute_value $npc_eval_weapon_4.variables.absolute_value $npc_eval_weapon_5.variables.absolute_value $npc_eval_weapon_6.variables.absolute_value $npc_eval_weapon_7.variables.absolute_value $npc_eval_weapon_8.variables.absolute_value $npc_eval_weapon_9.variables.absolute_value $npc_eval_weapon_10.variables.absolute_value $npc_eval_weapon_11.variables.absolute_value "}
									[if]
										[variable]
											name=npc_temp.variables.deft
											less_than=8
										[/variable]
										[then]
											[switch]
												variable=npc_eval_weapon_sort.id
												[case]
													value=1
													{VARIABLE will_carry 0}
												[/case]
												[case]
													value=2
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_2] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon}
												[/case]
												[case]
													value=3
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_2}
												[/case]
												[case]
													value=4
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_2] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_3}
												[/case]
												[case]
													value=5
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_4}
												[/case]
											[/switch]
										[/then]
										[else]
											[switch]
												variable=npc_eval_weapon_sort.id
												[case]
													value=1
													{VARIABLE will_carry 0}
												[/case]
												[case]
													value=2
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_2] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon}
												[/case]
												[case]
													value=3
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_2}
												[/case]
												[case]
													value=4
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_2] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_3}
												[/case]
												[case]
													value=5
													{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_4}
												[/case]
												[case]
													value=6
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_5}
												[/case]
												[case]
													value=7
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_6}
												[/case]
												[case]
													value=8
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_7}
												[/case]
												[case]
													value=9
													{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_8}
												[/case]
											[/switch]	
										[/else]
									[/if]
								[/case]
								[case]
									value=2
									{VARIABLE will_carry 1}
									
									# npc_eval_weapon, e1+e2+n
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon.variables.inventory.weapons.melee[$npc_eval_weapon.variables.equipment_slots.melee_3].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon.variables.inventory.weapons.melee[$npc_eval_weapon.variables.equipment_slots.melee_3]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon.variables.equipment_slots.melee_3 $npc_eval_weapon.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon.variables.equipment_slots.melee_3 sub 1}
										)
									}
									# npc_eval_weapon_2, e1+e3+n
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_2 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_2.variables.inventory.weapons.melee[$npc_eval_weapon_2.variables.equipment_slots.melee_2].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_2.variables.inventory.weapons.melee[$npc_eval_weapon_2.variables.equipment_slots.melee_2]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_2.variables.equipment_slots.melee_2 $npc_eval_weapon_2.variables.equipment_slots.melee_3}
											{VARIABLE npc_eval_weapon_2.variables.equipment_slots.melee_3 $npc_eval_weapon_2.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_2.variables.equipment_slots.melee_3 sub 1}
										)
									}
									# npc_eval_weapon_3, n+e2+e3
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_3 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_3.variables.inventory.weapons.melee[$npc_eval_weapon_3.variables.equipment_slots.melee_1].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_3.variables.inventory.weapons.melee[$npc_eval_weapon_3.variables.equipment_slots.melee_1]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_3.variables.equipment_slots.melee_1 $npc_eval_weapon_3.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_3.variables.equipment_slots.melee_1 sub 1}
										)
									}
									# npc_eval_weapon_4, n+e1+e2
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_4 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_4.variables.inventory.weapons.melee[$npc_eval_weapon_4.variables.equipment_slots.melee_3].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_4.variables.inventory.weapons.melee[$npc_eval_weapon_4.variables.equipment_slots.melee_3]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_4.variables.equipment_slots.melee_3 $npc_eval_weapon_4.variables.equipment_slots.melee_2}
											{VARIABLE npc_eval_weapon_4.variables.equipment_slots.melee_2 $npc_eval_weapon_4.variables.equipment_slots.melee_1}
											{VARIABLE npc_eval_weapon_4.variables.equipment_slots.melee_1 $npc_eval_weapon_4.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_4.variables.equipment_slots.melee_1 sub 1}
										)
									}
									# npc_eval_weapon_5, n+e1+e3
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_5 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_5.variables.inventory.weapons.melee[$npc_eval_weapon_5.variables.equipment_slots.melee_2].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_5.variables.inventory.weapons.melee[$npc_eval_weapon_5.variables.equipment_slots.melee_2]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_5.variables.equipment_slots.melee_2 $npc_eval_weapon_5.variables.equipment_slots.melee_1}
											{VARIABLE npc_eval_weapon_5.variables.equipment_slots.melee_1 $npc_eval_weapon_5.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_5.variables.equipment_slots.melee_1 sub 1}
										)
									}
									# npc_eval_weapon_6, e2+e1+n
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_6 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_6.variables.inventory.weapons.melee[$npc_eval_weapon_6.variables.equipment_slots.melee_3].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_6.variables.inventory.weapons.melee[$npc_eval_weapon_6.variables.equipment_slots.melee_3]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_6.variables.equipment_slots.melee_3 $npc_eval_weapon_6.variables.equipment_slots.melee_1}
											{VARIABLE npc_eval_weapon_6.variables.equipment_slots.melee_1 $npc_eval_weapon_6.variables.equipment_slots.melee_2}
											{VARIABLE npc_eval_weapon_6.variables.equipment_slots.melee_3 $npc_eval_weapon_6.variables.equipment_slots.melee_2}
											{VARIABLE npc_eval_weapon_6.variables.equipment_slots.melee_3 $npc_eval_weapon_6.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_6.variables.equipment_slots.melee_3 sub 1}
										)
									}
									# npc_eval_weapon_7, e2+e1+n
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_7 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_7.variables.inventory.weapons.melee[$npc_eval_weapon_7.variables.equipment_slots.melee_1].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_7.variables.inventory.weapons.melee[$npc_eval_weapon_7.variables.equipment_slots.melee_1]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_7.variables.equipment_slots.melee_3 $npc_eval_weapon_7.variables.equipment_slots.melee_2}
											{VARIABLE npc_eval_weapon_7.variables.equipment_slots.melee_2 $npc_eval_weapon_7.variables.equipment_slots.melee_3}
											{VARIABLE npc_eval_weapon_7.variables.equipment_slots.melee_3 $npc_eval_weapon_7.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_7.variables.equipment_slots.melee_3 sub 1}
										)
									}
									# npc_eval_weapon_8, e3+e2+n
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_8 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_8.variables.inventory.weapons.melee[$npc_eval_weapon_8.variables.equipment_slots.melee_1].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_8.variables.inventory.weapons.melee[$npc_eval_weapon_8.variables.equipment_slots.melee_1]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_8.variables.equipment_slots.melee_1 $npc_eval_weapon_8.variables.equipment_slots.melee_3}
											{VARIABLE npc_eval_weapon_8.variables.equipment_slots.melee_3 $npc_eval_weapon_8.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_8.variables.equipment_slots.melee_3 sub 1}
										)
									}
									# npc_eval_weapon_9, e3+e1+n
									{NPC_EVAL_WEAPON_TESTER npc_eval_weapon_9 melee 
										(	
											[if]
												[variable]
													name=npc_eval_weapon_9.variables.inventory.weapons.melee[$npc_eval_weapon_9.variables.equipment_slots.melee_2].undroppable
													boolean_not_equals=1
												[/variable]
												[then]
													{CLEAR_VARIABLE npc_eval_weapon_9.variables.inventory.weapons.melee[$npc_eval_weapon_9.variables.equipment_slots.melee_2]}
												[/then]
											[/if]
											{VARIABLE npc_eval_weapon_9.variables.equipment_slots.melee_2 $npc_eval_weapon_9.variables.equipment_slots.melee_1}
											{VARIABLE npc_eval_weapon_9.variables.equipment_slots.melee_1 $npc_eval_weapon_9.variables.equipment_slots.melee_3}
											{VARIABLE npc_eval_weapon_9.variables.equipment_slots.melee_3 $npc_eval_weapon_9.variables.inventory.weapons.melee.length}
											{VARIABLE_OP npc_eval_weapon_9.variables.equipment_slots.melee_3 sub 1}
										)
									}
									
									# prepare for sort
									[set_variables]
										name=npc_eval_weapon_sort
										mode=replace
										[value]
											id=1
											value=$npc_temp.variables.absolute_value
										[/value]
										[value]
											id=2
											value=$npc_eval_weapon.variables.absolute_value
										[/value]
										[value]
											id=3
											value=$npc_eval_weapon_2.variables.absolute_value
										[/value]
										[value]
											id=4
											value=$npc_eval_weapon_3.variables.absolute_value
										[/value]
										[value]
											id=5
											value=$npc_eval_weapon_4.variables.absolute_value
										[/value]
										[value]
											id=6
											value=$npc_eval_weapon_5.variables.absolute_value
										[/value]
										[value]
											id=7
											value=$npc_eval_weapon_6.variables.absolute_value
										[/value]
										[value]
											id=8
											value=$npc_eval_weapon_7.variables.absolute_value
										[/value]
										[value]
											id=9
											value=$npc_eval_weapon_8.variables.absolute_value
										[/value]
										[value]
											id=10
											value=$npc_eval_weapon_9.variables.absolute_value
										[/value]
									[/set_variables]
									
									{NPC_EVAL_WEAPON_SORT}
									
									[switch]
										variable=npc_eval_weapon_sort.id
										[case]
											value=1
											{VARIABLE will_carry 0}
										[/case]
										[case]
											value=2
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_3] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon}
										[/case]
										[case]
											value=3
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_2] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_2}
										[/case]
										[case]
											value=4
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_3}
										[/case]
										[case]
											value=5
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_3] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_4}
										[/case]
										[case]
											value=6
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_2] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_5}
										[/case]
										[case]
											value=7
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_3] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_6}
										[/case]
										[case]
											value=8
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_7}
										[/case]
										[case]
											value=9
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_1] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_8}
										[/case]
										[case]
											value=10
											{DROP_ITEM npc_temp.variables.inventory.weapons.melee[$npc_temp.variables.equipment_slots.melee_2] npc_temp.x npc_temp.y}
											{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon_8}
										[/case]
									[/switch]	
								[/case]
							[/switch]
						[/then]
						[else]
							{NPC_EVAL_WEAPON_SINGLE ranged "ranged"}
						[/else]
					[/if]
				[/else]
			[/if]
		[/then]
		[else]
			{VARIABLE will_carry 0}
		[/else]
	[/if]
	{VARIABLE construct_with_unstore yes}
[/event]

[event]
	name=npc_eval_armor
	first_time_only=no
	{VARIABLE construct_with_unstore no}
	[if]
		{ITEM_WIELDER}
		[then]
			{VARIABLE will_carry 1}
			{VARIABLE drop_flag_1 0}
			{VARIABLE drop_flag_3 0}
			{VARIABLE drop_flag_4 0}
			# npc_temp = unit variable
			# store unit, record value
			[set_variables]
				name=npc_eval_armor
				mode=replace
				to_variable=npc_temp
			[/set_variables]
			# give armor, equip
			[switch]
				variable=$path|.category
				[case]
					value=torso_armor
					{VARIABLE equipped_id torso_armor}
					{VARIABLE equipped_path torso}
				[/case]
				[case]
					value=head_armor
					{VARIABLE equipped_id head_armor}
					{VARIABLE equipped_path head}
				[/case]
				[case]
					value=legs_armor
					{VARIABLE equipped_id leg_armor}
					{VARIABLE equipped_path legs}
				[/case]
				[case]
					value=shield
					{VARIABLE equipped_id shield}
					{VARIABLE equipped_path shield}
				[/case]
			[/switch]
			[if]
				[variable]
					name=npc_temp.type
					equals="Skeleton_MODRPG"
				[/variable]
				[and]
					name=npc_temp.side
					equals=$side_number
				[/and]
				[then]
					[if]
						[variable]
							name=npc_temp.variables.inventory.armor.$equipped_path|[$npc_temp.variables.equipment_slots.$equipped_id|].undroppable
							boolean_not_equals=1
						[/variable]
						[then]
							{DROP_ITEM npc_temp.variables.inventory.armor.$equipped_path|[$npc_temp.variables.equipment_slots.$equipped_id|] npc_temp.x npc_temp.y}
							{CLEAR_VARIABLE npc_temp.variables.inventory.armor.$equipped_path|[$npc_temp.variables.equipment_slots.$equipped_id|]}
						[/then]
					[/if]
					[set_variables]
						name=npc_temp.variables.inventory.armor.$equipped_path|
						mode=append
						to_variable=$path
					[/set_variables]
					{VARIABLE npc_temp.variables.equipment_slots.$equipped_id| $npc_temp.variables.inventory.armor.$equipped_path|.length}
					{VARIABLE_OP npc_temp.variables.equipment_slots.$equipped_id| sub 1}
					[if]
		                [variable]
		                    name=npc_temp.variables.inventory.armor.$equipped_path|[$npc_temp.variables.equipment_slots.$equipped_id|].restricts.head
		                    greater_than=0
		                [/variable]
						[and]
							[variable]
								name=npc_temp.variables.inventory.armor.head[$npc_temp.variables.equipment_slots.head_armor].undroppable
								boolean_not_equals=1
							[/variable]
						[/and]
		                [then]
							{DROP_ITEM npc_temp.variables.inventory.armor.head[$npc_temp.variables.equipment_slots.head_armor] npc_temp.x npc_temp.y}
							{CLEAR_VARIABLE npc_temp.variables.inventory.armor.head[$npc_temp.variables.equipment_slots.head_armor]}
		                    {VARIABLE npc_temp.variables.equipment_slots.head_armor 0}
		                [/then]
		            [/if]
		            [if]
		                [variable]
		                    name=npc_temp.variables.inventory.armor.$equipped_path|[$npc_temp.variables.equipment_slots.$equipped_id|].restricts.legs
		                    greater_than=0
		                [/variable]
						[and]
							[variable]
								name=npc_temp.variables.inventory.armor.legs[$npc_temp.variables.equipment_slots.leg_armor].undroppable
								boolean_not_equals=1
							[/variable]
						[/and]
		                [then]
							{DROP_ITEM npc_temp.variables.inventory.armor.legs[$npc_temp.variables.equipment_slots.leg_armor] npc_temp.x npc_temp.y}
							{CLEAR_VARIABLE npc_temp.variables.inventory.armor.legs[$npc_temp.variables.equipment_slots.leg_armor]}
		                    {VARIABLE npc_temp.variables.equipment_slots.leg_armor 0}
		                [/then]
		            [/if]
		            [if]
		                [variable]
		                    name=npc_temp.variables.inventory.armor.$equipped_path|[$npc_temp.variables.equipment_slots.$equipped_id|].restricts.shield
		                    greater_than=0
		                [/variable]
						[and]
							[variable]
								name=npc_temp.variables.inventory.armor.shield[$npc_temp.variables.equipment_slots.shield].undroppable
								boolean_not_equals=1
							[/variable]
						[/and]
		                [then]
							{DROP_ITEM npc_temp.variables.inventory.armor.shield[$npc_temp.variables.equipment_slots.shield] npc_temp.x npc_temp.y}
							{CLEAR_VARIABLE npc_temp.variables.inventory.armor.shield[$npc_temp.variables.equipment_slots.shield]}
		                    {VARIABLE npc_temp.variables.equipment_slots.shield 0}
		                [/then]
		            [/if]
					{VARIABLE construct_with_unstore yes}
					[construct_unit]
						variable=npc_temp
						unstore=$construct_with_unstore
					[/construct_unit]
				[/then]
				[else]
					[set_variables]
						name=npc_eval_armor.variables.inventory.armor.$equipped_path|
						mode=append
						to_variable=$path
					[/set_variables]
					[if]
						[variable]
							name=npc_eval_armor.variables.inventory.armor.$equipped_path|[$npc_eval_armor.variables.equipment_slots.$equipped_id|].undroppable
							boolean_not_equals=1
						[/variable]
						[then]
							{CLEAR_VARIABLE npc_eval_armor.variables.inventory.armor.$equipped_path|[$npc_eval_armor.variables.equipment_slots.$equipped_id|]}
						[/then]
					[/if]
					{VARIABLE npc_eval_armor.variables.equipment_slots.$equipped_id| $npc_eval_armor.variables.inventory.armor.$equipped_path|.length}
					{VARIABLE_OP npc_eval_armor.variables.equipment_slots.$equipped_id| sub 1}
					# handle armor restrictions
					[if]
		                [variable]
		                    name=npc_eval_armor.variables.inventory.armor.$equipped_path|[$npc_eval_armor.variables.equipment_slots.$equipped_id|].restricts.head
		                    greater_than=0
		                [/variable]
						[and]
							[variable]
								name=npc_temp.variables.inventory.armor.head[$npc_temp.variables.equipment_slots.head_armor].undroppable
								boolean_not_equals=1
							[/variable]
						[/and]
		                [then]
							{CLEAR_VARIABLE npc_eval_armor.variables.inventory.armor.head[$npc_eval_armor.variables.equipment_slots.head_armor]}
		                    {VARIABLE npc_eval_armor.variables.equipment_slots.head_armor 0}
							{VARIABLE drop_flag_1 1}
		                [/then]
		            [/if]
		            [if]
		                [variable]
		                    name=npc_eval_armor.variables.inventory.armor.$equipped_path|[$npc_eval_armor.variables.equipment_slots.$equipped_id|].restricts.legs
		                    greater_than=0
		                [/variable]
						[and]
							[variable]
								name=npc_temp.variables.inventory.armor.legs[$npc_temp.variables.equipment_slots.leg_armor].undroppable
								boolean_not_equals=1
							[/variable]
						[/and]
		                [then]
							{CLEAR_VARIABLE npc_eval_armor.variables.inventory.armor.legs[$npc_eval_armor.variables.equipment_slots.leg_armor]}
		                    {VARIABLE npc_eval_armor.variables.equipment_slots.leg_armor 0}
							{VARIABLE drop_flag_3 1}
		                [/then]
		            [/if]
		            [if]
		                [variable]
		                    name=npc_eval_armor.variables.inventory.armor.$equipped_path|[$npc_eval_armor.variables.equipment_slots.$equipped_id|].restricts.shield
		                    greater_than=0
		                [/variable]
						[and]
							[variable]
								name=npc_temp.variables.inventory.armor.shield[$npc_temp.variables.equipment_slots.shield].undroppable
								boolean_not_equals=1
							[/variable]
						[/and]
		                [then]
							{CLEAR_VARIABLE npc_eval_armor.variables.inventory.armor.shield[$npc_eval_armor.variables.equipment_slots.shield]}
		                    {VARIABLE npc_eval_armor.variables.equipment_slots.shield 0}
							{VARIABLE drop_flag_4 1}
		                [/then]
		            [/if]
					
					# construct and find value
					[construct_unit]
						variable=npc_eval_armor
						unstore=$construct_with_unstore
					[/construct_unit]
					# {WML_MSG "eval_armor $npc_eval_armor.variables.absolute_value npc_temp $npc_temp.variables.absolute_value"}
					# compare values, if value is lower, will_carry=0
					[if]
						[variable]
							name=npc_temp.variables.absolute_value
							greater_than=$npc_eval_armor.variables.absolute_value
						[/variable]
						[then]
							{VARIABLE will_carry 0}
						[/then]
						[else]
							{DROP_ITEM npc_temp.variables.inventory.armor.$equipped_path|[$npc_temp.variables.equipment_slots.$equipped_id|] npc_temp.x npc_temp.y}
							#drop restricted items
							[if]
								[variable]
									name=drop_flag_1
									boolean_equals=1
								[/variable]
								[then]
									{DROP_ITEM npc_temp.variables.inventory.armor.head[$npc_temp.variables.equipment_slots.head_armor] npc_temp.x npc_temp.y}
								[/then]
							[/if]
							[if]
								[variable]
									name=drop_flag_3
									boolean_equals=1
								[/variable]
								[then]
									{DROP_ITEM npc_temp.variables.inventory.armor.legs[$npc_temp.variables.equipment_slots.leg_armor] npc_temp.x npc_temp.y}
								[/then]
							[/if]
							[if]
								[variable]
									name=drop_flag_4
									boolean_equals=1
								[/variable]
								[then]
									{DROP_ITEM npc_temp.variables.inventory.armor.shield[$npc_temp.variables.equipment_slots.shield] npc_temp.x npc_temp.y}
								[/then]
							[/if]
							{VARIABLE construct_with_unstore yes}
							[construct_unit]
								variable=npc_eval_armor
								unstore=$construct_with_unstore
							[/construct_unit]
						[/else]
					[/if]
					{CLEAR_VARIABLE npc_eval_armor,npc_temp}
				[/else]
			[/if]
		[/then]
		[else]
			{VARIABLE will_carry 0}
		[/else]
	[/if]
	{VARIABLE construct_with_unstore yes}
[/event]

[event]
	name=npc_eval_usable
	first_time_only=no

	[if]
		[variable]
			name=$path|.command
			equals="potion_healing"
		[/variable]
		[and]
			{ITEM_WIELDER}
		[/and]
		[then]
			{VARIABLE will_carry 1}
			{VARIABLE temp_npc_max_hp $npc_temp.max_hitpoints}
			{VARIABLE_OP temp_npc_max_hp sub $npc_temp.hitpoints}
			{VARIABLE temp_npc_half_hp $npc_temp.max_hitpoints}
			{VARIABLE_OP temp_npc_half_hp divide 2}
			[if]
				[variable]
					name=$path|.healing_number
					less_than_equal_to=$temp_npc_max_hp
				[/variable]
				[or]
					[variable]
						name=npc_temp.status.poisoned
						equals=yes
					[/variable]
				[/or]
				[or]
					[variable]
						name=npc_temp.hitpoints
						less_than_equal_to=$temp_npc_half_hp
					[/variable]
				[/or]
				[not]
					[variable]
						name=npc_temp.variables.simple_action
						numerical_equals=0
					[/variable]
					[and]
						[variable]
							name=npc_temp.attacks_left
							numerical_equals=0
						[/variable]
					[/and]
				[/not]
				[then]
					{VARIABLE target_x $npc_temp.x}
		            {VARIABLE target_y $npc_temp.y}
					[unstore_unit]
						variable=npc_temp
					[/unstore_unit]
					[store_unit]
						[filter]
							x,y=$target_x,$target_y
						[/filter]
						variable=target_unit 
					[/store_unit]
					{VARIABLE healing_number $$path|.healing_number}
					[fire_event]
						name=healing_display
					[/fire_event]
					[unstore_unit]
						variable=target_unit
						text=$display_hp
						{COLOR_HEAL}
					[/unstore_unit]
					[store_unit]
						[filter]
							x,y=$target_x,$target_y
						[/filter]
						variable=npc_temp
					[/store_unit]
					{EXPEND_SIMPLE_ACTION npc_temp}
					{VARIABLE_OP $path|.uses sub 1}
				[/then]
			[/if]
			[if]
				[variable]
					name=$path|.uses
					greater_than=0
				[/variable]
				[then]											
					[set_variables]
						name=npc_temp.variables.inventory.usables
						mode=append
						to_variable=$path
					[/set_variables]
				[/then]
			[/if]
			[unstore_unit]
                variable=npc_temp
                find_vacant=no
            [/unstore_unit]
		[/then]
		[else]
			{VARIABLE will_carry 0}
			{CLEAR_VARIABLE npc_temp}
		[/else]
	[/if]
[/event]

[event]
	name=npc_eval_gold
	first_time_only=no
	
	[if]
		[variable]
			name=npc_temp.variables.likes_gold
			equals=1
		[/variable]
		[then]
			{VARIABLE will_carry 1}
			{VARIABLE_OP npc_temp.variables.personal_gold add $$path|.amount}
			[sound]
			    name=gold.ogg
			[/sound]
			[unstore_unit]
                variable=npc_temp
                find_vacant=no
            [/unstore_unit]
		[/then]
		[else]
			{VARIABLE will_carry 0}
			{CLEAR_VARIABLE npc_temp}
		[/else]
	[/if]
[/event]

[event]
	name=eval_npc
	first_time_only=no
	[switch]
		variable=$path|.category
		[case]
			value="melee_weapon"
			[fire_event]
				name=npc_eval_weapon
			[/fire_event]
		[/case]
		[case]
			value="ranged_weapon"
			[fire_event]
				name=npc_eval_weapon
			[/fire_event]
		[/case]
		[case]
			value="usables"
			[fire_event]
				name=npc_eval_usable
			[/fire_event]
		[/case]
		[case]
			value="gold"
			[fire_event]
				name=npc_eval_gold
			[/fire_event]
		[/case]
		[else]
			[fire_event]
				name=npc_eval_armor
			[/fire_event]
		[/else]
	[/switch]
[/event]

