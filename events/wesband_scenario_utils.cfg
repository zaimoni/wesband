# item gain if enemy killed has item and killer is enemy
[event]
    name=die
    first_time_only=no
    [filter]
        side=$const.enemy_sides
    [/filter]
    [if]
        [variable]
            name=second_unit.side
            greater_than=$const.max_player_count
        [/variable]
        [then]
			[if]
				[variable]
	                name=unit.variables.inventory.length
	                greater_than=0
	            [/variable]
				[then]
		            {NPC_EVAL_EQUIPMENT $x2|,$y2|}
					{FOREACH unit.variables.inventory.usables o}
						{VARIABLE path "unit.variables.inventory.usables[$o]"}
						[store_unit]
							variable=npc_temp
							[filter]
								x,y=$x2|,$y2|
							[/filter]
						[/store_unit]
						[fire_event]
							name=npc_eval_usable
						[/fire_event]
						{DROP_UNWANTED}
					{NEXT o}
				[/then]
			[/if]
			[if]
				[variable]
					name=unit.personal_gold
					greater_than=0
				[/variable]
				[then]
					[store_unit]
						variable=npc_temp
						[filter]
							x,y=$x2|,$y2|
						[/filter]
					[/store_unit]
					[if]
						[variable]
							name=npc_temp.variables.likes_gold
							equals=1
						[/variable]
						[then]
							{VARIABLE_OP second_unit.personal_gold add $unit.personal_gold}
				            [unstore_unit]
				                variable=second_unit
				                text=$unit.personal_gold
				                red=255
				                green=215
				            [/unstore_unit]
						[/then]
						[else]
							{DROP_GOLD unit.personal_gold $x1| $y1|}
						[/else]
					[/if]
					[sound]
					    name=gold.ogg
					[/sound]
				[/then]
			[/if]
        [/then]
		[else]
			{DROP_INVENTORY}
			[if]
				[variable]
					name=unit.variables.personal_gold
					greater_than=0
				[/variable]
				[then]
					[sound]
					    name=gold.ogg
					[/sound]
				[/then]
			[/if]
		[/else]
    [/if]
[/event]

# find if last enemy, then cleared
[event]
    name=die
    first_time_only=no
    [filter]
        side=$const.enemy_sides
    [/filter]
    [if]
        [have_unit]
            side=$const.enemy_sides
        [/have_unit]
        [then]
        [/then]
        [else]
			{VARIABLE_OP dungeon_level.max add 1}
			{VARIABLE just_passed 1}
			{VARIABLE current_level_cleared 1}
			{RANDOM 0..1}
			[switch]
				variable=random
				[case]
					value=0
					[music]
						name=victory.ogg
						play_once=yes
						immediate=yes
					[/music]
				[/case]
				[else]
					[music]
						name=victory2.ogg
						play_once=yes
						immediate=yes
					[/music]
				[/else]
			[/switch]
			[unstore_unit]
				variable=second_unit
				text=_ "level cleared"
				red=255
				green=215
			[/unstore_unit]
			[store_unit]
				[filter]
					side=$const.player_sides
				[/filter]
				variable=clear_heal
			[/store_unit]
			{FOREACH clear_heal i}
				# for any objects
				[object]
					[filter]
						x,y=$clear_heal[$i].x,$clear_heal[$i].y
					[/filter]
					silent=yes
					[effect]
						apply_to=hitpoints
						heal_full=yes
					[/effect]
					[effect]
						apply_to=status
						remove=poisoned
					[/effect]
				[/object]
				# for directly applied variables
				[store_unit]
					[filter]
						x,y=$clear_heal[$i].x,$clear_heal[$i].y
					[/filter]
					variable=clear_mana
				[/store_unit]
				[if]
					[variable]
						name=clear_mana[$i].variables.attributes.magic_casting.max_mana
						greater_than=0
					[/variable]
					[then]
						{VARIABLE clear_mana[$i].variables.abilities.magic_casting.mana $clear_mana[$i].variables.abilities.magic_casting.max_mana}
						{VARIABLE clear_mana[$i].modifications.trait[0].name "mana: $clear_mana[$i].variables.abilities.magic_casting.mana|/$clear_mana[$i].variables.abilities.magic_casting.max_mana|"}
					[/then]
				[/if]
				[unstore_unit]
					variable=clear_mana
				[/unstore_unit]
			{NEXT i}
			{CLEAR_VARIABLE clear_heal}
			{CLEAR_VARIABLE clear_mana}
			{VARIABLE s 0}
			[while]
				[variable]
					name=s
					less_than=$const.max_player_count
				[/variable]
				[do]
					{VARIABLE_OP s add 1}
					[modify_side]
						side=$s
						fog=no
						shroud=no
					[/modify_side]
				[/do]
			[/while]
			{CLEAR_VARIABLE s}
        [/else]
    [/if]
[/event]

# no longer different inventory structures for hench/pc
[event]
    name=die
    first_time_only=no
    [filter]
        side=$const.player_sides
    [/filter]
	{DROP_INVENTORY}
	[if]
		[variable]
			name=unit.variables.personal_gold
			greater_than=0
		[/variable]
		[then]
			[sound]
			    name=gold.ogg
			[/sound]
		[/then]
	[/if]
[/event]

# pick up item if enemy npc moves to it
[event]
    name=moveto
    first_time_only=no
    [allow_undo]
    [/allow_undo]
    [filter]
        side=$const.enemy_sides
    [/filter]
    [if]
        [variable]
            name=ground.x$x1|.y$y1|.items.length
            greater_than=0
        [/variable]
        [then]
            {FOREACH_COLLAPSE ground.x$x1|.y$y1|.items o}
                {VARIABLE path ground.x$x1|.y$y1|.items[$o]}
                [store_unit]
                    variable=npc_temp
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                [/store_unit]
                [fire_event]
                    name=eval_npc
                [/fire_event]
                [if]
                    [variable]
                        name=will_carry
                        numerical_equals=1
                    [/variable]
                    [then]
						[item_cleanup]
							x=$x1
							y=$y1
							index=$o
						[/item_cleanup]
                    [/then]
                [/if]
            {NEXT_COLLAPSE o}
        [/then]
    [/if]
[/event]
# may want way for henches to pick up item

# add to main undead minions if not above $max_hench
[event]
	name=side turn
	first_time_only=no
	[if]
		[variable]
			name=side_number
			less_than_equal_to=$const.max_player_count
		[/variable]
		[then]
			[store_unit]
	            [filter]
					side=$const.player_sides
	                canrecruit=yes
	            [/filter]
	            variable=hench_num_query
	        [/store_unit]
			[if]
				[variable]
					name=hench_num_query.length
					numerical_equals=1
				[/variable]
				[then]
					{VARIABLE max_hench 2}
				[/then]
				[else]
					{VARIABLE max_hench 1}
				[/else]
			[/if]
			{CLEAR_VARIABLE hench_num_query}
			[store_unit]
				variable=undead_query
				[filter]
					side=$side_number
					race=undead
					[not]
						canrecruit=yes
					[/not]
					[filter_wml]
						[variables]
							[not]
								is_hench=1
							[/not]
						[/variables]
					[/filter_wml]
				[/filter]
			[/store_unit]
			[store_unit]
				variable=hench_query
				[filter]
					side=$side_number
					[not]
						canrecruit=yes
					[/not]
					[filter_wml]
						[variables]
							is_hench=1
						[/variables]
					[/filter_wml]
				[/filter]
			[/store_unit]
			{VARIABLE hench_number $hench_query.length}
			{FOREACH undead_query i}
#				{INITIALIZE_PLAGUED undead_query[$i]}
				[if]
					[variable]
						name=hench_number
						greater_than_equal_to=$max_hench
					[/variable]
					[then]
						# degrade those not part of main group, kill if below 1 hp
						[if]
							[variable]
								name=undead_query[$i].max_hitpoints
								greater_than=$undead_query[$i].variables.stored_max_hitpoints
							[/variable]
							[then]
								{VARIABLE undead_query[$i].variables.stored_max_hitpoints $undead_query[$i].max_hitpoints}
							[/then]
						[/if]
						{VARIABLE_OP undead_query[$i].max_hitpoints sub 6}
						[if]
							[variable]
								name=undead_query[$i].max_hitpoints
								less_than=$undead_query[$i].hitpoints
							[/variable]
							[then]
								{VARIABLE undead_query[$i].hitpoints $undead_query[$i].max_hitpoints}
							[/then]
						[/if]
						{VARIABLE undead_query[$i].upkeep 0}
						[sound]
							name={SOUND_LIST:ZOMBIE_HIT}
						[/sound]
						[unstore_unit]
							variable=undead_query[$i]
							text=-6
							{COLOR_HARM}
						[/unstore_unit]
						[if]
							[variable]
								name=undead_query[$i].hitpoints
								less_than=1
							[/variable]
							[then]
								[kill]
		                            x,y=$undead_query[$i].x,$undead_query[$i].y
		                            animate=yes
		                        [/kill]
							[/then]
						[/if]
					[/then]
					[else]
						# add to main undead minions
						{VARIABLE undead_query[$i].variables.is_hench 1}
						{VARIABLE undead_query[$i].overlays "misc/hero-icon.png"}
						{VARIABLE undead_query[$i].upkeep 0}
						{VARIABLE_OP hench_number add 1}
						[if]
							[variable]
								name=undead_query[$i].max_hitpoints
								less_than=$undead_query[$i].variables.stored_max_hitpoints
							[/variable]
							[then]
								{VARIABLE undead_query[$i].max_hitpoints $undead_query[$i].variables.stored_max_hitpoints}
							[/then]
						[/if]
						[unstore_unit]
							variable=undead_query[$i]
						[/unstore_unit]
					[/else]
				[/if]
			{NEXT i}
			# decrease exp from summons
			[store_unit]
				variable=summon_query
				[filter]
					side=$side_number
					[not]
						canrecruit=yes
					[/not]
					[filter_wml]
						[variables]
							is_summon=1
						[/variables]
					[/filter_wml]
				[/filter]
			[/store_unit]
			{FOREACH summon_query i}
				{VARIABLE_OP summon_query[$i].experience sub 2}
				[if]
					[variable]
						name=summon_query[$i].experience
						greater_than=-1
					[/variable]
					[then]
						[unstore_unit]
							variable=summon_query[$i]
						[/unstore_unit]
					[/then]
					[else]
						[kill]
							x,y=$summon_query[$i].x,$summon_query[$i].y
							animate=yes
						[/kill]
					[/else]
				[/if]
			{NEXT i}
			{CLEAR_VARIABLE summon_query}
		[/then]
	[/if]
[/event]

# rest if no enemies near, recover 1 mana otherwise
[event]
    name=side turn
    first_time_only=no
	[store_unit]
		[filter]
			side=$side_number
		[/filter]
		variable=rest_unit
	[/store_unit]
	[if]
		[variable]
			name=side_number
			less_than_equal_to=$const.max_player_count
		[/variable]
		[then]
			[store_locations]
				variable=player_radius_temp_locs
				radius=12
				[filter]
					side=$const.enemy_sides
					[not]
						[filter_wml]
							[status]
								guardian="yes"
							[/status]
						[/filter_wml]
					[/not]
				[/filter]
			[/store_locations]
			{FOREACH rest_unit i}
				[if]
					[variable]
						name=rest_unit[$i].status.poisoned
						equals=yes
					[/variable]
					[or]
						[have_location]
							x,y=$rest_unit[$i].x,$rest_unit[$i].y
							find_in=player_radius_temp_locs
						[/have_location]
					[/or]
					[then]
						[if]
							[variable]
								name=rest_unit[$i].variables.abilities.magic_casting.max_mana
								greater_than=0
							[/variable]
							[and]
								[variable]
									name=rest_unit[$i].variables.abilities.magic_casting.max_mana
									greater_than=$rest_unit[$i].variables.abilities.magic_casting.mana
								[/variable]
							[/and]
							[then]
								{VARIABLE_OP rest_unit[$i].variables.abilities.magic_casting.mana add 1}
								{VARIABLE rest_unit[$i].modifications.trait[0].name "mana: $rest_unit[$i].variables.abilities.magic_casting.mana|/$rest_unit[$i].variables.abilities.magic_casting.max_mana|"}
								[unstore_unit]
									variable=rest_unit[$i]
								[/unstore_unit]
							[/then]
						[/if]
					[/then]
					[else]
						[if]
							[variable]
								name=rest_unit[$i].variables.abilities.magic_casting.max_mana
								greater_than=0
							[/variable]
							[and]
								[variable]
									name=rest_unit[$i].variables.abilities.magic_casting.mana
									less_than=$rest_unit[$i].variables.abilities.magic_casting.max_mana
								[/variable]
							[/and]
							[then]
								{VARIABLE rest_unit[$i].variables.abilities.magic_casting.mana $rest_unit[$i].variables.abilities.magic_casting.max_mana}
								{VARIABLE rest_unit[$i].modifications.trait[0].name "mana: $rest_unit[$i].variables.abilities.magic_casting.mana|/$rest_unit[$i].variables.abilities.magic_casting.max_mana|"}
								{VARIABLE rest_unstore_flag 1}
							[/then]
						[/if]
						[if]
							[variable]
								name=rest_unit[$i].hitpoints
								less_than=$rest_unit[$i].max_hitpoints
							[/variable]
							[then]
								[sound]
									name=heal.wav
								[/sound]
								{VARIABLE rest_unit[$i].hitpoints $rest_unit[$i].max_hitpoints}
								{VARIABLE rest_unstore_flag 1}
							[/then]
						[/if]
						[if]
							[variable]
								name=rest_unstore_flag
								numerical_equals=1
							[/variable]
							[then]
								[unstore_unit]
									variable=rest_unit[$i]
									text=_ "rested"
									{COLOR_HEAL}
								[/unstore_unit]
								{VARIABLE rest_unstore_flag 0}
							[/then]
						[/if]
					[/else]
				[/if]
				{CLEAR_VARIABLE rouse_temp_locs}
			{NEXT i}
		[/then]
		[else]
			[store_locations]
				variable=player_radius_temp_locs
				radius=12
				[filter]
					side=$const.player_sides
				[/filter]
			[/store_locations]
			{FOREACH rest_unit i}
				# rouse nearby enemies, not sure if this is the best place like this
				[if]
					[variable]
						name=rest_unit[$i].status.petrified
						boolean_not_equals=on
					[/variable]
					[then]
						[store_locations]
							variable=rouse_temp_locs
							x,y=$rest_unit[$i].x,$rest_unit[$i].y
							radius=$rest_unit.max_moves
						[/store_locations]
						[unpetrify]
							side=$side_number
							[filter_location]
								find_in=rouse_temp_locs
							[/filter_location]
							[filter_wml]
								[status]
									petrified=on
								[/status]
							[/filter_wml]
						[/unpetrify]
						{CLEAR_VARIABLE rouse_temp_locs}
					[/then]
				[/if]
				[if]
					[not]
						[variable]
							name=rest_unit[$i].status.poisoned
							equals=yes
						[/variable]
						[or]
							[have_location]
								x,y=$rest_unit[$i].x,$rest_unit[$i].y
								find_in=player_radius_temp_locs
							[/have_location]
						[/or]
					[/not]
					[then]
						[if]
							[variable]
								name=rest_unit[$i].hitpoints
								less_than=$rest_unit[$i].max_hitpoints
							[/variable]
							[then]
								{VARIABLE rest_unit[$i].hitpoints $rest_unit[$i].max_hitpoints}
								[unstore_unit]
									variable=rest_unit[$i]
								[/unstore_unit]
							[/then]
						[/if]
					[/then]
				[/if]
				{CLEAR_VARIABLE rouse_temp_locs}
			{NEXT i}
		[/else]
	[/if]
	{CLEAR_VARIABLE rest_unit,rest_unstore_flag,target_unit,player_radius_temp_locs}
[/event]

# rouse close enemies
[event]
    name=moveto
    first_time_only=no
    [allow_undo]
    [/allow_undo]
    [filter]
        side=$const.player_sides
		[not]
			type="WBD Unknown Adventurer"
		[/not]
    [/filter]
	[fire_event]
		name=rousing
		[primary_unit]
			x,y=$x1,$y1
		[/primary_unit]
	[/fire_event]
	[if]
		[variable]
			name=unit.variables.mobility
			equals=2
		[/variable]
		[and]
			[variable]
				name=unit.variables.abilities.sneak
				equals=1
			[/variable]
		[/and]
		[then]
			{VARIABLE temp_stealth $unit.variables.stealthiness}
			{CALCULATE_STEALTHINESS unit}
			{IF_VAR unit.variables.stealthiness not_equals $temp_stealth (
				[then]
					[unstore_unit]
						variable=unit
					[/unstore_unit]
				[/then]
			)}
		[/then]
	[/if]
[/event]
[event]
	name=rousing
	first_time_only=no
	[store_locations]
		variable=rouse_temp_locs
		x,y=$unit.x,$unit.y
		radius=14
		[filter]
		[/filter]
	[/store_locations]
    [unpetrify]
		side=$const.enemy_sides
		[filter_location]
			find_in=rouse_temp_locs
		[/filter_location]
		[filter_wml]
			[status]
				petrified="yes"
			[/status]
		[/filter_wml]
    [/unpetrify]
	{CLEAR_VARIABLE rouse_temp_locs}
	[rouse_units]
		x=$unit.x
		y=$unit.y
		refresh=yes
	[/rouse_units]
[/event]
[event]
	name=spot
	first_time_only=no
	
	[store_unit]
		variable=spotted
		[filter]
			x,y=$x1,$y1
		[/filter]
	[/store_unit]
	[store_unit]
		variable=spotter
		[filter]
			x,y=$x2,$y2
		[/filter]
	[/store_unit]
	{CHAT_OUTPUT_ALLY spotted}
	{CHAT_OUTPUT_ENEMY spotter subject}
	[chat]
		message="$spotter_name notices $spotted_name|."
	[/chat]
[/event]
[event]
	name=hear
	first_time_only=no

	[store_unit]
		variable=spotted
		[filter]
			x,y=$x1,$y1
		[/filter]
	[/store_unit]
	{CHAT_OUTPUT_ALLY spotted}
	[chat]
		message="$spotted_name hears a noise in the distance."
	[/chat]
[/event]

[event]
	name=side turn
	first_time_only=no
	# clear guardian status from units on rouse list
	[store_unit]
		[filter]
			id=$rouse_list
		[/filter]
		variable=rouse
	[/store_unit]
	{FOREACH rouse i}
		{CLEAR_VARIABLE rouse[i].status.guardian}
		[unstore_unit]
			variable=rouse[i]
		[/unstore_unit]
	{NEXT i}
	{CLEAR_VARIABLE rouse,rouse_list}
[/event]

[event]
    name=start

	# need to clear wall/lava/chasm if there's a unit on it
	# hopefully, this is no longer necessary, but shouldn't hurt anything
	[store_locations]
		variable=walls
		terrain="Xos,Qxu,Ql,Qlf,Xu"
		[filter]
		[/filter]
	[/store_locations]
	{FOREACH walls i}
		{MODIFY_TERRAIN "Uu" $walls[$i].x $walls[$i].y}
	{NEXT i}

    [redraw]
    [/redraw]
[/event]


[event]
	name=preload
	first_time_only=no
	[lua]
		code = <<
			wesnoth.dofile "~add-ons/Wesband/lua/Utils.lua"
			wesnoth.dofile "~add-ons/Wesband/lua/Rousing.lua"
			wesnoth.dofile "~add-ons/Wesband/lua/Prob.lua"
			wesnoth.dofile "~add-ons/Wesband/lua/Items.lua"
			wesnoth.dofile "~add-ons/Wesband/lua/UnitConstruction.lua"
			wesnoth.dofile "~add-ons/Wesband/lua/Maps.lua"
			>>
	[/lua]
[/event]


# events for event-driven abilities need to be included here instead of in unit construction
[event]
    name=die
    first_time_only=no

    [filter]
        [not]
            [filter_wml]
                [status]
                    not_living="yes"
                [/status]
            [/filter_wml]
        [/not]
    [/filter]

    [filter_second]
        ability=wbd_feeding
    [/filter_second]

    [unstore_unit]
        variable=second_unit
        {COLOR_HEAL}
        text= _ "+1 max HP"
        find_vacant=no
    [/unstore_unit]

    [object]
        silent=yes
        duration=forever

        [filter]
            x,y=$x2,$y2
        [/filter]

        [effect]
            apply_to=hitpoints
            increase_total=1
            increase=1
        [/effect]
    [/object]
[/event]

[event]
	name=level change
	[event]
		name=side turn
		delayed_variable_substitution=no
		[endlevel]
		    next_scenario=$next_scenario
		    result=victory
			save=no
			replay_save=no
			carryover_percentage=100
			bonus=no
			carryover_report=no
			linger_mode=no
		[/endlevel]
	[/event]
	{IF_VAR level_adjustment equals up (
        [then]
            {VARIABLE_OP dungeon_level.current sub 1}
			[if]
				[variable]
					name=current_level_cleared
					numerical_equals=0
				[/variable]
				[then]
					[store_unit]
			            [filter]
			                side=$const.enemy_sides
			            [/filter]
			            variable=dungeon_mobs
			        [/store_unit]
					{FOREACH dungeon_mobs i}
						[if]
							[variable]
								name=dungeon_mobs[$i].hitpoints
								less_than=$dungeon_mobs[$i].max_hitpoints
							[/variable]
							[then]
								{VARIABLE dungeon_mobs[$i].hitpoints $dungeon_mobs[$i].max_hitpoints}
							[/then]
						[/if]
						[set_variables]
							name=dungeon_clusters[$dungeon_mobs[$i].variables.cluster].mob
							mode=append
							to_variable=dungeon_mobs[$i]
						[/set_variables]
					{NEXT i}
					{CLEAR_VARIABLE dungeon_mobs}
					
					# players share shroud, only storing once
					[store_shroud]
						side=$side_number
						variable=shroud_data
					[/store_shroud]
					
					[save_map]
						variable=dungeon_map
					[/save_map]
				[/then]
			[/if]
        [/then]
        [else]
            {VARIABLE_OP dungeon_level.current add 1}
            {IF_VAR dungeon_level.current less_than $dungeon_level.max (
                [then]
                    {VARIABLE dungeon_level.current $dungeon_level.max}
                [/then]
				[else]
					{VARIABLE dungeon_level.max $dungeon_level.current}
				[/else]
            )}
			[if]
				[variable]
					name=in_dungeon
					numerical_equals=1
				[/variable]
				[then]
					{VARIABLE just_passed 1}
				[/then]
				[else]
					[save_map]
						variable=town_map
					[/save_map]
				[/else]
			[/if]
        [/else]
    )}
	{CLEAR_VARIABLE ground}
    [message]
        x,y=$x1,$y1
        message=_ "Time to move on."
    [/message]
	# deal with consequences of loading saved game
	{IF_VAR reload_marker equals 2 (
		[then]
			# save units
			[store_unit]
				[filter]
					side=$const.player_sides
				[/filter]
				variable=bug_store
			[/store_unit]
		[/then]
		[else]
			{CLEAR_VARIABLE reload_marker}
		[/else]
	)}
	{CLEAR_VARIABLE level_adjustment,next_scenario}
	[end_turn]
	[/end_turn]
[/event]