# level up macros

#define LEVEL_NPC_COMPARE_WEAPON CLASS DAMAGE_REQUIRED_ATT NUMBER_REQUIRED_ATT NUMBER_REQUIRED_ATT2
	{IF_VAR npc_temp.npc_init.weapon_skills.{CLASS}.damage greater_than $npc_temp.variables.weapon_skills.{CLASS}.damage (
		{UPGRADE_WEAPON_DAMAGE_CONDITION npc_temp {CLASS} {DAMAGE_REQUIRED_ATT}}
		[then]
			{UPGRADE_WEAPON_DAMAGE_EFFECT npc_temp {CLASS}}
			{VARIABLE level_npc_vars.nothing_tried 0}
		[/then]
	)}
	{IF_VAR npc_temp.npc_init.weapon_skills.{CLASS}.attack greater_than $npc_temp.variables.weapon_skills.{CLASS}.attack (
		{UPGRADE_WEAPON_STRIKE_CONDITION npc_temp {CLASS} {NUMBER_REQUIRED_ATT} {NUMBER_REQUIRED_ATT2}}
		[then]
			{UPGRADE_WEAPON_STRIKE_EFFECT npc_temp {CLASS}}
			{VARIABLE level_npc_vars.nothing_tried 0}
		[/then]
	)}
#enddef

#define LEVEL_NPC_COMPARE_UPGRADE MACRO NAME
	{IF_VAR npc_temp.npc_init.{NAME} greater_than $npc_temp.variables.{NAME} (
		{UPGRADE_{MACRO}_CONDITION npc_temp}
		[then]
			{UPGRADE_{MACRO}_EFFECT npc_temp}
			{VARIABLE level_npc_vars.nothing_tried 0}
		[/then]
	)}
#enddef

#define LEVEL_NPC_COMPARE_MISC MACRO NAME
	# {WML_MSG "{NAME} $npc_temp.npc_init.abilities.{NAME} $npc_temp.variables.abilities.{NAME}"}
	{IF_VAR npc_temp.npc_init.abilities.{NAME} greater_than $npc_temp.variables.abilities.{NAME} (
		[variable]
			name=npc_temp.npc_init.abilities.{NAME}
			numerical_not_equals=0
		[/variable]
		{UPGRADE_{MACRO}_CONDITION npc_temp}
		[then]
			{UPGRADE_{MACRO}_EFFECT npc_temp}
			{VARIABLE level_npc_vars.nothing_tried 0}
		[/then]
	)}
#enddef

#define LEVEL_NPC_UPGRADE_MISC PATH MACRO 
	[if]
		[variable]
			name=level_npc_vars.nothing_tried
			boolean_equals=1
		[/variable]
		{UPGRADE_{MACRO}_CONDITION {PATH}}
		[then]
			{UPGRADE_{MACRO}_EFFECT {PATH}}
			{VARIABLE level_npc_vars.nothing_tried 0}
		[/then]
	[/if]
#enddef

#define LEVEL_NPC_UPGRADE_WEAPON PATH CLASS DAMAGE_REQUIRED_ATT NUMBER_REQUIRED_ATT NUMBER_REQUIRED_ATT2
	[if]
		[variable]
			name=level_npc_vars.nothing_tried
			boolean_equals=1
		[/variable]
		{UPGRADE_WEAPON_STRIKE_CONDITION {PATH} {CLASS} {NUMBER_REQUIRED_ATT} {NUMBER_REQUIRED_ATT2}}
		[then]
			{UPGRADE_WEAPON_STRIKE_EFFECT {PATH} {CLASS}}
			{VARIABLE level_npc_vars.nothing_tried 0}
		[/then]
	[/if]
	[if]
		[variable]
			name=level_npc_vars.nothing_tried
			boolean_equals=1
		[/variable]
		{UPGRADE_WEAPON_DAMAGE_CONDITION {PATH} {CLASS} {DAMAGE_REQUIRED_ATT}}
		[then]
			{UPGRADE_WEAPON_DAMAGE_EFFECT {PATH} {CLASS}}
			{VARIABLE level_npc_vars.nothing_tried 0}
		[/then]
	[/if]
#enddef

# VAL of 0 takes away ability, value of -1 grants it
#define LEVEL_NPC_ALIGN_ABILITY NAME VAL
	{IF_VAR npc_temp.variables.abilities.{NAME} less_than 1 (
		[then]
			{VARIABLE npc_temp.variables.abilities.{NAME} {VAL}}
		[/then]
	)}
#enddef

# equipment eval macros

#define NPC_EVAL_WEAPON_SORT
	{FOREACH npc_eval_weapon_sort a}
		{VARIABLE a_minus $a}
		{VARIABLE_OP a_minus sub 1}
		[if]
			[variable]
				name=npc_eval_weapon_sort[$a].value
				greater_than=$npc_eval_weapon_sort[$a_minus].value
			[/variable]
			[and]
				[variable]
					name=a
					greater_than=0
				[/variable]
			[/and]
			[then]
				[set_variables]
					name=npc_eval_weapon_sort_temp_array
					to_variable=npc_eval_weapon_sort[$a_minus]
				[/set_variables]
				[set_variables]
					name=npc_eval_weapon_sort[$a_minus]
					to_variable=npc_eval_weapon_sort[$a]
				[/set_variables]
				[set_variables]
					name=npc_eval_weapon_sort[$a]
					to_variable=npc_eval_weapon_sort_temp_array
				[/set_variables]
				{CLEAR_VARIABLE npc_eval_weapon_sort_temp_array}
				{VARIABLE a -1}
			[/then]
			[else]
				[if]
					[variable]
						name=npc_eval_weapon_sort[$a].value
						numerical_equals=$npc_eval_weapon_sort[$a_minus].value
					[/variable]
					[and]
						[variable]
							name=npc_eval_weapon_sort[$a].id
							greater_than=$npc_eval_weapon_sort[$a_minus].id
						[/variable]
					[/and]
					[then]
						[set_variables]
							name=npc_eval_weapon_sort_temp_array
							to_variable=npc_eval_weapon_sort[$a_minus]
						[/set_variables]
						[set_variables]
							name=npc_eval_weapon_sort[$a_minus]
							to_variable=npc_eval_weapon_sort[$a]
						[/set_variables]
						[set_variables]
							name=npc_eval_weapon_sort[$a]
							to_variable=npc_eval_weapon_sort_temp_array
						[/set_variables]
						{CLEAR_VARIABLE npc_eval_weapon_sort_temp_array}
						{VARIABLE a -1}
					[/then]
				[/if]
			[/else]
		[/if]
	{NEXT a}
#enddef
	
#define NPC_EVAL_WEAPON_TESTER VAR RANGE WML
	[set_variables]
		name={VAR}
		mode=replace
		to_variable=npc_temp
	[/set_variables]
	[set_variables]
		name={VAR}.variables.inventory.weapons.{RANGE}
		mode=append
		to_variable=$path
	[/set_variables]
	{WML}
	{VARIABLE unit_path {VAR}}
	[construct_unit]
		variable=npc_temp
		unstore=$construct_with_unstore
	[/construct_unit]
#enddef

#define NPC_EVAL_WEAPON_UNSTORE_UNIT VAR
	[construct_unit]
		variable={VAR}
	[/construct_unit]
#enddef

#define NPC_EVAL_WEAPON_SINGLE RANGE SLOT
	{VARIABLE will_carry 1}
	# npc_temp = unit variable
	# store unit, change x,y to 1,1, record value
	{NPC_EVAL_WEAPON_TESTER npc_eval_weapon {RANGE} (
		[if]
			[variable]
				name=npc_eval_weapon.variables.inventory.weapons.{RANGE}[$npc_eval_weapon.variables.equipment_slots.{SLOT}].undroppable
				boolean_not_equals=1
			[/variable]
			[then]
				{CLEAR_VARIABLE npc_eval_weapon.variables.inventory.weapons.{RANGE}[$npc_eval_weapon.variables.equipment_slots.{SLOT}]}
			[/then]
		[/if]
		{VARIABLE npc_eval_weapon.variables.equipment_slots.{SLOT} $npc_eval_weapon.variables.inventory.weapons.{RANGE}.length}
		{VARIABLE_OP npc_eval_weapon.variables.equipment_slots.{SLOT} sub 1}
		)
	}
	# {WML_MSG "eval_weapon $npc_eval_weapon.variables.absolute_value npc_temp $npc_temp.variables.absolute_value"}
	# compare values, if value is lower, will_carry=0
	[if]
		[variable]
			name=npc_temp.variables.absolute_value
			greater_than=$npc_eval_weapon.variables.absolute_value
		[/variable]
		[then]
			{VARIABLE will_carry 0}
		[/then]
		[else]
			{DROP_ITEM npc_temp.variables.inventory.weapons.{RANGE}[$npc_temp.variables.equipment_slots.{SLOT}] npc_temp.x npc_temp.y}
			{NPC_EVAL_WEAPON_UNSTORE_UNIT npc_eval_weapon}			
		[/else]
	[/if]
	{CLEAR_VARIABLE npc_eval_weapon}
	{VARIABLE construct_with_unstore yes}
#enddef



#define NPC_EVAL_ARMOR_PART PATH XY
	{FOREACH_COLLAPSE {PATH} m}
		[if]
			[variable]
				name={PATH}[$m].undroppable
				boolean_not_equals=1
			[/variable]
			[then]
				{VARIABLE path "{PATH}[$m]"}
				[store_unit]
					variable=npc_temp
					[filter]
						x,y={XY}
					[/filter]
				[/store_unit]
				[fire_event]
					name=npc_eval_armor
				[/fire_event]
				{DROP_UNWANTED}
			[/then]
		[/if]
	{NEXT_COLLAPSE m}
#enddef

#define NPC_EVAL_EQUIPMENT XY
	{FOREACH unit.variables.inventory.weapons.melee m}
		[if]
			[variable]
				name=unit.variables.inventory.weapons.melee[$m].undroppable
				boolean_not_equals=1
			[/variable]
			[then]
				{VARIABLE path "unit.variables.inventory.weapons.melee[$m]"}
				[store_unit]
					variable=npc_temp
					[filter]
						x,y={XY}
					[/filter]
				[/store_unit]
				[fire_event]
					name=npc_eval_weapon
				[/fire_event]
				{DROP_UNWANTED}
			[/then]
		[/if]
	{NEXT m}
	{FOREACH unit.variables.inventory.weapons.ranged r}
		[if]
			[variable]
				name=unit.variables.inventory.weapons.ranged[$r].undroppable
				boolean_not_equals=1
			[/variable]
			[then]
				{VARIABLE path "unit.variables.inventory.weapons.ranged[$r]"}
				[store_unit]
					variable=npc_temp
					[filter]
						x,y={XY}
					[/filter]
				[/store_unit]
				[fire_event]
					name=npc_eval_weapon
				[/fire_event]
				{DROP_UNWANTED}
			[/then]
		[/if]
	{NEXT r}
	{NPC_EVAL_ARMOR_PART unit.variables.inventory.armor.torso {XY}}
	{NPC_EVAL_ARMOR_PART unit.variables.inventory.armor.head {XY}}
	{NPC_EVAL_ARMOR_PART unit.variables.inventory.armor.legs {XY}}
	{NPC_EVAL_ARMOR_PART unit.variables.inventory.armor.shield {XY}}
#enddef

#define ITEM_WIELDER
    [variable]
        name=npc_temp.race
        equals=dwarf
    [/variable]
    [or]
        [variable]
            name=npc_temp.race
            equals=elf
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=troll
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=ogre
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=goblin
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=human
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=merman
        [/variable]
		#no legs!
		[not]
			[variable]
				name=$path|.category
				equals=legs_armor
			[/variable]
		[/not]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=orc
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=lizard
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=undead
        [/variable]
        [and]
            #exclude what isn't skeleton/lich
            [variable]
                name=npc_temp.resistance.impact
                greater_than=100
            [/variable]
			[or]
				[variable]
	                name=npc_temp.npc_init.abilities.skeletal
	                greater_than=0
	            [/variable]
			[/or]
        [/and]
		[not]
			[variable]
				name=$path|.command
				equals="potion_healing"
			[/variable]
		[/not]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=drake
        [/variable]
    [/or]
    [or]
        [variable]
            name=npc_temp.race
            equals=naga
        [/variable]
		#no legs!
		[not]
			[variable]
				name=$path|.category
				equals=legs_armor
			[/variable]
		[/not]
    [/or]
	[or]
        [variable]
            name=npc_temp.race
            equals=minotaurs
        [/variable]
    [/or]
#enddef

#define INITIALIZE_PLAGUED PATH
	[if]
		[variable]
			name={PATH}.npc_init.length
			greater_than=0
		[/variable]
		[and]
			[variable]
				# this -should- do it
				name={PATH}.variables.inventory.length
				less_than=1
			[/variable]
		[/and]
		[then]
			[set_variables]
				name=temp_undead_upgrade
				mode=replace
				[value]
					level=${PATH}.level
					moves=${PATH}.moves
					hitpoints=${PATH}.hitpoints
					max_hitpoints=${PATH}.max_hitpoints
					experience=${PATH}.experience
					max_experience=${PATH}.max_experience
					name=${PATH}.name
					attacks_left=${PATH}.attacks_left
					zoc=${PATH}.zoc
					resting=${PATH}.resting
					overlays=${PATH}.overlays
					name=${PATH}.name
					[variables]
						undead_points_used=${PATH}.variables.undead_points_used
						is_hench=${PATH}.variables.is_hench
						simple_action=${PATH}.variables.simple_action
						max_simple_action=${PATH}.variables.max_simple_action
					[/variables]
				[/value]
			[/set_variables]
			{CREATE_BASE "{PATH}"}
			{VARIABLE unit_path "{PATH}"}
			{NPC_RACE_BASE "{PATH}"}
			[fire_event]
				name=npc_apply_traits
			[/fire_event]
			[fire_event]
				name=npc_apply_items
			[/fire_event]
			[construct_unit]
				variable={PATH}
			[/construct_unit]
			[set_variables]
				name={PATH}
				mode=merge
				[value]
					level=$temp_undead_upgrade.level
					moves=$temp_undead_upgrade.moves
					hitpoints=$temp_undead_upgrade.hitpoints
					max_hitpoints=$temp_undead_upgrade.max_hitpoints
					experience=$temp_undead_upgrade.experience
					max_experience=$temp_undead_upgrade.max_experience
					name=$temp_undead_upgrade.name
					attacks_left=$temp_undead_upgrade.attacks_left
					zoc=$temp_undead_upgrade.zoc
					resting=$temp_undead_upgrade.resting
					overlays=$temp_undead_upgrade.overlays
					name=$temp_undead_upgrade.name
					[variables]
						undead_points_used=$temp_undead_upgrade.variables.undead_points_used
						simple_action=$temp_undead_upgrade.variables.simple_action
						max_simple_action=$temp_undead_upgrade.variables.max_simple_action
						is_hench=$temp_undead_upgrade.variables.is_hench
					[/variables]
				[/value]
			[/set_variables]
		[/then]
	[/if]
#enddef