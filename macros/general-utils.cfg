#utility macros

#define NULL
#enddef
#define NULL_1 A
#enddef

#define FIND_DISTANCE X1 Y1 X2 Y2
    [get_distance]
		x1={X1}
		y1={Y1}
		x2={X2}
		y2={Y2}
	[/get_distance]
#enddef

#define UPGRADE_TRIVIAL PATH DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name={PATH}.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 3}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost ${PATH}.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 2}
            {VARIABLE_OP {COST_HOLDER}_cost add 3}
        [/else]
    [/if]
#enddef

#define UPGRADE_EASY PATH DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name={PATH}.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 1}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost ${PATH}.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 3}
            {VARIABLE_OP {COST_HOLDER}_cost add 1}
        [/else]
    [/if]
#enddef

#define UPGRADE_MEDIUM PATH DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name={PATH}.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 2}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost ${PATH}.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 3}
            {VARIABLE_OP {COST_HOLDER}_cost add 2}
        [/else]
    [/if]
#enddef

#define UPGRADE_HARD PATH DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name={PATH}.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 3}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost ${PATH}.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 3}
            {VARIABLE_OP {COST_HOLDER}_cost add 3}
        [/else]
    [/if]
#enddef

#define UPGRADE_SUPERHARD PATH DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name={PATH}.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 4}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost ${PATH}.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 4}
            {VARIABLE_OP {COST_HOLDER}_cost add 4}
        [/else]
    [/if]
#enddef

#define UPGRADE_EASY_WEAPON PATH DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost ${PATH}.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 5}
    {VARIABLE_OP {COST_HOLDER}_cost add 3}
#enddef

#define UPGRADE_MEDIUM_WEAPON PATH DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost ${PATH}.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 5}
    {VARIABLE_OP {COST_HOLDER}_cost add 4}
#enddef

#define UPGRADE_HARD_WEAPON PATH DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost ${PATH}.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 5}
    {VARIABLE_OP {COST_HOLDER}_cost add 5}
#enddef

#define UPGRADE_EASY_WEAPON_NUMBER PATH DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost ${PATH}.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 7}
    {VARIABLE_OP {COST_HOLDER}_cost add 3}
#enddef

#define UPGRADE_MEDIUM_WEAPON_NUMBER PATH DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost ${PATH}.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 7}
    {VARIABLE_OP {COST_HOLDER}_cost add 4}
#enddef

#define UPGRADE_HARD_WEAPON_NUMBER PATH DATA_LOCATION COST_HOLDER
    {VARIABLE {COST_HOLDER}_cost ${PATH}.variables.weapon_skills.{DATA_LOCATION}}
    {VARIABLE_OP {COST_HOLDER}_cost multiply 7}
    {VARIABLE_OP {COST_HOLDER}_cost add 5}
#enddef

#define UPGRADE_SUPERHARD_WEAPON PATH DATA_LOCATION COST_HOLDER
    [if]
        [variable]
            name={PATH}.{DATA_LOCATION}
            numerical_equals=0
        [/variable]
        [then]
            {VARIABLE {COST_HOLDER}_cost 6}
        [/then]
        [else]
            {VARIABLE {COST_HOLDER}_cost ${PATH}.variables.weapon_skills.{DATA_LOCATION}}
            {VARIABLE_OP {COST_HOLDER}_cost multiply 6}
            {VARIABLE_OP {COST_HOLDER}_cost add 6}
        [/else]
    [/if]
#enddef

#define FOREACH_COLLAPSE ARRAY VAR
    [set_variable]
        name={VAR}
        value="${ARRAY}.length"
    [/set_variable]
    [set_variable]
        name={VAR}
        add=-1
    [/set_variable]
    [while]
        [variable]
            name={VAR}
            greater_than=-1
        [/variable]
        [do]
#enddef

#define NEXT_COLLAPSE VAR
    [set_variable]
        name={VAR}
        add=-1
    [/set_variable]
[/do]
[/while]
{CLEAR_VARIABLE {VAR}}
#enddef

#define MOVEMENT_CALCULATOR LOCATION_X LOCATION_Y PATH
    [get_move_cost]
		x={LOCATION_X}
		y={LOCATION_Y}
		unit={PATH}
	[/get_move_cost]
#enddef

#define DEFENSE_CALCULATOR LOCATION_X LOCATION_Y PATH
    [get_defense]
		x={LOCATION_X}
		y={LOCATION_Y}
		unit={PATH}
	[/get_defense]
#enddef

# filters an ability or special, fires command if filter passes 
#define FILTER_ABILITY PATH FILTER_ID FILTER_OP FILTER_VALUE COMMAND
	{FOREACH {PATH} macro_i}
		[if]
			[variable]
				name={PATH}[$macro_i].{FILTER_ID}
				{FILTER_OP}={FILTER_VALUE}
			[/variable]
			[then]
				{COMMAND}
				{VARIABLE macro_i ${PATH}.length}
			[/then]
		[/if]
	{NEXT macro_i}
#enddef

# filters an ability or special not specfic to id, fires command if filter passes 
#define FILTER_ABILITY_NON_SPECIFIC PATH COMMAND
	{FOREACH {PATH} macro_i}
		[if]
			[variable]
				name={PATH}[$macro_i].id
				not_equals=$an_empty_variable
			[/variable]
			[then]
				{COMMAND}
			[/then]
		[/if]
	{NEXT macro_i}
#enddef

#define CONSTRUCT_UNIT
	[construct_unit]
		variable=$unit_path
	[/construct_unit]
#enddef

	# for firing simple events which don't require primary/secondary units/attacks
#define FIRE_EVENT NAME
	[fire_event]
		name={NAME}
	[/fire_event]
#enddef

	# for firing events which require primary/secondary units or attacks
	# eg {FIRE_EVENT die ({TAG_ENCLOSE primary_unit x,y=$x1,$y1}
	#	{TAG_ENCLOSE secondary_unit x,y=$x2,$y2})}
#define FIRE_COMPLEX NAME FILTERS
	[fire_event]
		name={NAME}
		{FILTERS}
	[/fire_event]
#enddef

	# this might be easier to read in some situations, also might make it easier to make sure
	# the start & end of a WML tag are lined up properly.
#define TAG_ENCLOSE TAG_NAME TAG_CONTENTS
	[{TAG_NAME}]
		{TAG_CONTENTS}
	[/{TAG_NAME}]
#enddef
	
	# since DEBUG_MSG is getting old
#define WML_MSG MESSAGE
	[wml_message]
		message={MESSAGE}
		logger=err
	[/wml_message]
#enddef

#define CHAT_OUTPUT_ALLY VAR
	{VARIABLE chat_output.strlen 0}
	{VARIABLE_OP chat_output.strlen string_length ${VAR}.name}
	{IF_VAR chat_output.strlen greater_than 0 (
		[then]
			{VARIABLE {VAR}_name ${VAR}.name}
		[/then]
		[else]
			[store_unit]
				variable=chat_output.leader
				[filter]
					canrecruit=yes
					side=${VAR}.side
				[/filter]
			[/store_unit]
			{IF_VAR chat_output.leader.length greater_than 0 (
				[then]
					{VARIABLE {VAR}_name "$chat_output.leader.name|'s minion"}
				[/then]
				[else]
					{VARIABLE {VAR}_name "The ${VAR}.language_name"}
				[/else]
			)}
		[/else]
	)}
	{CLEAR_VARIABLE chat_output}
#enddef

#define CHAT_OUTPUT_ENEMY VAR SUBOBJ
	{VARIABLE chat_output.strlen 0}
	{VARIABLE chat_output.subobj "{SUBOBJ}"}
	{VARIABLE_OP chat_output.strlen string_length ${VAR}.name}
	{IF_VAR chat_output.strlen greater_than 0 (
		[then]
			{VARIABLE {VAR}_name "${VAR}.name the ${VAR}.language_name"}
		[/then]
		[else]
			{IF_VAR chat_output.subobj equals "subject" (
				[then]
					{VARIABLE {VAR}_name "The ${VAR}.language_name"}
				[/then]
				[else]
					{VARIABLE {VAR}_name "the ${VAR}.language_name"}
				[/else]
			)}
		[/else]
	)}
	{CLEAR_VARIABLE chat_output}
#enddef

#define DEBUG_NPC_WEAPON_SKILLS CLASS
damage: {CLASS} $npc_temp.npc_init.weapon_skills.{CLASS}.damage $npc_temp.variables.weapon_skills.{CLASS}.damage strikes: $npc_temp.npc_init.weapon_skills.{CLASS}.attack $npc_temp.variables.weapon_skills.{CLASS}.attack #enddef